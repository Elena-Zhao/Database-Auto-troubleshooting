Series: metricsts 
ARIMA(1,1,1)                    

Coefficients:
         ar1      ma1
      0.2979  -0.7690
s.e.  0.0669   0.0444

sigma^2 estimated as 4082:  log likelihood=-2983.43
AIC=5972.87   AICc=5972.91   BIC=5985.71

Training set error measures:
                     ME     RMSE      MAE       MPE   MAPE      MASE
Training set -0.4646066 63.82865 41.14004 -2.643662 12.606 0.4147461

Forecast method: ARIMA(1,1,1)                   

Model Information:
Series: metricsts 
ARIMA(1,1,1)                    

Coefficients:
         ar1      ma1
      0.2979  -0.7690
s.e.  0.0669   0.0444

sigma^2 estimated as 4082:  log likelihood=-2983.43
AIC=5972.87   AICc=5972.91   BIC=5985.71

Error measures:
                     ME     RMSE      MAE       MPE   MAPE      MASE
Training set -0.4646066 63.82865 41.14004 -2.643662 12.606 0.4147461

Forecasts:
    Point Forecast     Lo 80    Hi 80      Lo 95    Hi 95
537       245.0212 163.14511 326.8973 119.802510 370.2399
538       238.7718 146.15092 331.3927  97.120386 380.4232
539       236.9101 138.97934 334.8409  87.137908 386.6823
540       236.3556 134.39383 338.3173  80.418551 392.2926
541       236.1903 130.62002 341.7607  74.734468 397.6462
542       236.1411 127.15738 345.1249  69.464858 402.8174
543       236.1265 123.85477 348.3982  64.421715 407.8312
544       236.1221 120.66233 351.5819  59.541621 412.7026
545       236.1208 117.56049 354.6811  54.798443 417.4432
546       236.1204 114.53912 357.7017  50.177875 422.0630
547       236.1203 111.59145 360.6492  45.669864 426.5707
548       236.1203 108.71208 363.5285  41.266263 430.9743
549       236.1203 105.89640 366.3441  36.960049 435.2805
550       236.1203 103.14033 369.1002  32.745005 439.4955
551       236.1203 100.44023 371.8003  28.615568 443.6249
552       236.1203  97.79283 374.4477  24.566721 447.6738
553       236.1203  95.19516 377.0453  20.593923 451.6466
554       236.1203  92.64451 379.5960  16.693041 455.5475
555       236.1203  90.13842 382.1021  12.860307 459.3802
556       236.1203  87.67463 384.5659   9.092268 463.1482
Series:Series:  metricstsmetricsts  

ARIMA(1,1,1)                   ARIMA(1,1,1)                     


Coefficients:

Coefficients:
             ar1     ar1      ma1      ma1
    
      0.2979  0.2979  -0.7690  -0.7690
s.e.
s.e.  0.0669  0.0669   0.0444   0.0444


sigma^2 estimated as 
sigma^2 estimated as 40824082:  log likelihood=:  log likelihood=-2983.43-2983.43

AIC=AIC=5972.875972.87   AICc=   AICc=5972.915972.91   BIC=   BIC=5985.715985.71


Training set error measures:

Training set error measures:
                                 ME         ME     RMSE     RMSE      MAE      MAE       MPE       MPE   MAPE   MAPE      MASE      MASE
Training set
Training set -0.4646066 -0.4646066 63.82865 63.82865 41.14004 41.14004 -2.643662 -2.643662 12.606 12.606 0.4147461 0.4147461


Forecast method: ARIMA(1,1,1)                   
Forecast method: ARIMA(1,1,1)                   

Model Information:


Model Information:
Series:Series:  metricstsmetricsts  

ARIMA(1,1,1)                   ARIMA(1,1,1)                     


Coefficients:

Coefficients:
             ar1     ar1      ma1      ma1
    
      0.2979  0.2979  -0.7690  -0.7690
s.e.
s.e.  0.0669  0.0669   0.0444   0.0444


sigma^2 estimated as 
sigma^2 estimated as 40824082:  log likelihood=:  log likelihood=-2983.43-2983.43

AIC=AIC=5972.875972.87   AICc=   AICc=5972.915972.91   BIC=   BIC=5985.715985.71


Error measures:

Error measures:
                                 ME         ME     RMSE     RMSE      MAE      MAE       MPE       MPE   MAPE   MAPE      MASE      MASE
Training set
Training set -0.4646066 -0.4646066 63.82865 63.82865 41.14004 41.14004 -2.643662 -2.643662 12.606 12.606 0.4147461 0.4147461


Forecasts:

Forecasts:
       Point Forecast Point Forecast     Lo 80     Lo 80    Hi 80    Hi 80      Lo 95      Lo 95    Hi 95    Hi 95
537
537       245.0212       245.0212 163.14511 163.14511 326.8973 326.8973 119.802510 119.802510 370.2399 370.2399
538
538       238.7718       238.7718 146.15092 146.15092 331.3927 331.3927  97.120386  97.120386 380.4232 380.4232
539
539       236.9101       236.9101 138.97934 138.97934 334.8409 334.8409  87.137908  87.137908 386.6823 386.6823
540
540       236.3556       236.3556 134.39383 134.39383 338.3173 338.3173  80.418551  80.418551 392.2926 392.2926
541
541       236.1903       236.1903 130.62002 130.62002 341.7607 341.7607  74.734468  74.734468 397.6462 397.6462
542
542       236.1411       236.1411 127.15738 127.15738 345.1249 345.1249  69.464858  69.464858 402.8174 402.8174
543
543       236.1265       236.1265 123.85477 123.85477 348.3982 348.3982  64.421715  64.421715 407.8312 407.8312
544
544       236.1221       236.1221 120.66233 120.66233 351.5819 351.5819  59.541621  59.541621 412.7026 412.7026
545
545       236.1208       236.1208 117.56049 117.56049 354.6811 354.6811  54.798443  54.798443 417.4432 417.4432
546
546       236.1204       236.1204 114.53912 114.53912 357.7017 357.7017  50.177875  50.177875 422.0630 422.0630
547
547       236.1203       236.1203 111.59145 111.59145 360.6492 360.6492  45.669864  45.669864 426.5707 426.5707
548
548       236.1203       236.1203 108.71208 108.71208 363.5285 363.5285  41.266263  41.266263 430.9743 430.9743
549
549       236.1203       236.1203 105.89640 105.89640 366.3441 366.3441  36.960049  36.960049 435.2805 435.2805
550
550       236.1203       236.1203 103.14033 103.14033 369.1002 369.1002  32.745005  32.745005 439.4955 439.4955
551
551       236.1203       236.1203 100.44023 100.44023 371.8003 371.8003  28.615568  28.615568 443.6249 443.6249
552
552       236.1203       236.1203  97.79283  97.79283 374.4477 374.4477  24.566721  24.566721 447.6738 447.6738
553
553       236.1203       236.1203  95.19516  95.19516 377.0453 377.0453  20.593923  20.593923 451.6466 451.6466
554
554       236.1203       236.1203  92.64451  92.64451 379.5960 379.5960  16.693041  16.693041 455.5475 455.5475
555
555       236.1203       236.1203  90.13842  90.13842 382.1021 382.1021  12.860307  12.860307 459.3802 459.3802
556
556       236.1203       236.1203  87.67463  87.67463 384.5659 384.5659   9.092268   9.092268 463.1482 463.1482



	Box-Ljung test	Box-Ljung test



data:  data:  metricsforecast$residualsmetricsforecast$residuals

X-squared = 30.7639, df = 20, p-value = 0.05839X-squared = 30.7639, df = 20, p-value = 0.05839




Forecast method: HoltWinters
Forecast method: HoltWinters

Model Information:


Model Information:
Holt-Winters exponential smoothingHolt-Winters exponential smoothing  withwith  trend andtrend and  additiveadditive  seasonal component.seasonal component.

Call:


Call:
HoltWinters(x = metricsts)HoltWinters(x = metricsts)



Smoothing parameters:
Smoothing parameters:
 alpha:  alpha: 0.41208580.4120858

 beta :  beta : 00

 gamma:  gamma: 11



Coefficients:
Coefficients:
                [,1]          [,1]
a  
a    1.912749e+04  1.912749e+04
b  
b    3.047061e-03  3.047061e-03
s1 
s1  -2.134696e+01 -2.134696e+01
s2 
s2  -2.268051e+01 -2.268051e+01
s3 
s3  -2.290777e+01 -2.290777e+01
s4 
s4  -2.281197e+01 -2.281197e+01
s5 
s5  -2.232694e+01 -2.232694e+01
s6 
s6  -2.085066e+01 -2.085066e+01
s7 
s7  -2.212773e+01 -2.212773e+01
s8 
s8  -2.166501e+01 -2.166501e+01
s9 
s9  -1.975077e+01 -1.975077e+01
s10
s10 -2.272796e+01 -2.272796e+01
s11
s11 -2.128435e+01 -2.128435e+01
s12
s12  8.360073e+01  8.360073e+01
s13
s13  1.458004e+02  1.458004e+02
s14
s14  7.662560e+01  7.662560e+01
s15
s15  3.549114e+01  3.549114e+01
s16
s16  9.979732e+00  9.979732e+00
s17
s17 -4.132734e+00 -4.132734e+00
s18
s18 -1.382555e+01 -1.382555e+01
s19
s19 -1.912103e+01 -1.912103e+01
s20
s20 -1.970184e+01 -1.970184e+01
s21
s21 -2.053030e+01 -2.053030e+01
s22
s22 -2.154887e+01 -2.154887e+01
s23
s23 -1.966946e+01 -1.966946e+01
s24
s24 -1.959207e+01 -1.959207e+01
s25
s25 -1.830240e+01 -1.830240e+01
s26
s26 -2.045968e+01 -2.045968e+01
s27
s27 -2.021562e+01 -2.021562e+01
s28
s28 -2.055634e+01 -2.055634e+01
s29
s29 -2.254403e+01 -2.254403e+01
s30
s30 -2.307315e+01 -2.307315e+01
s31
s31 -2.364712e+01 -2.364712e+01
s32
s32 -1.995991e+01 -1.995991e+01
s33
s33 -2.132696e+01 -2.132696e+01
s34
s34 -2.151189e+01 -2.151189e+01
s35
s35  8.272477e+01  8.272477e+01
s36
s36  1.445124e+02  1.445124e+02
s37
s37  1.801690e+02  1.801690e+02
s38
s38  2.016607e+02  2.016607e+02
s39
s39  1.103952e+02  1.103952e+02
s40
s40  5.401933e+01  5.401933e+01
s41
s41  2.295678e+01  2.295678e+01
s42
s42  2.342039e+00  2.342039e+00
s43
s43 -1.033187e+01 -1.033187e+01
s44
s44 -1.805093e+01 -1.805093e+01
s45
s45 -2.298980e+01 -2.298980e+01
s46
s46 -2.681760e+01 -2.681760e+01
s47
s47 -2.730796e+01 -2.730796e+01
s48
s48 -2.721609e+01 -2.721609e+01
s49
s49 -2.555014e+01 -2.555014e+01
s50
s50  1.424882e+01  1.424882e+01
s51
s51  1.725911e+02  1.725911e+02
s52
s52  1.030952e+02  1.030952e+02
s53
s53  5.798961e+01  5.798961e+01
s54
s54  2.734159e+01  2.734159e+01
s55
s55  9.374956e+00  9.374956e+00
s56
s56 -1.518600e+02 -1.518600e+02
s57
s57 -9.502917e+01 -9.502917e+01
s58
s58 -6.554717e+01 -6.554717e+01
s59
s59 -4.810184e+01 -4.810184e+01
s60
s60 -3.662667e+01 -3.662667e+01
s61
s61 -3.231752e+01 -3.231752e+01
s62
s62 -2.567247e+01 -2.567247e+01
s63
s63 -2.444734e+01 -2.444734e+01
s64
s64 -1.535756e+01 -1.535756e+01
s65
s65  1.586382e+01  1.586382e+01
s66
s66  2.546647e+01  2.546647e+01
s67
s67  2.130873e+01  2.130873e+01
s68
s68  1.094401e+01  1.094401e+01
s69
s69  4.043151e+00  4.043151e+00
s70
s70 -4.721388e+00 -4.721388e+00
s71
s71 -8.502341e+00 -8.502341e+00
s72
s72  5.084313e+01  5.084313e+01
s73
s73 -3.686357e+00 -3.686357e+00
s74
s74  1.238565e+02  1.238565e+02
s75
s75 -9.671811e+01 -9.671811e+01
s76
s76 -6.931812e+01 -6.931812e+01
s77
s77 -5.218042e+01 -5.218042e+01
s78
s78 -3.664364e+01 -3.664364e+01
s79
s79 -2.909733e+01 -2.909733e+01
s80
s80 -2.337989e+01 -2.337989e+01
s81
s81 -2.076594e+01 -2.076594e+01
s82
s82 -1.984389e+01 -1.984389e+01
s83
s83 -1.881670e+01 -1.881670e+01
s84
s84 -1.936224e+01 -1.936224e+01
s85
s85 -1.767722e+01 -1.767722e+01
s86
s86 -1.919163e+01 -1.919163e+01
s87
s87 -2.214434e+01 -2.214434e+01
s88
s88 -2.223811e+01 -2.223811e+01
s89
s89 -2.232690e+01 -2.232690e+01
s90
s90 -2.289406e+01 -2.289406e+01


Error measures:

Error measures:
                               ME       ME     RMSE     RMSE      MAE      MAE         MPE         MPE      MAPE      MAPE      MASE      MASE
Training set
Training set 0.132308 0.132308 70.64815 70.64815 32.53269 32.53269 0.001297419 0.001297419 0.1697414 0.1697414 0.8078217 0.8078217


Forecasts:

Forecasts:
                 Point Forecast Point Forecast    Lo 80    Lo 80    Hi 80    Hi 80    Lo 95    Lo 95    Hi 95    Hi 95
4.044444
4.044444       19106.15       19106.15 19015.36 19015.36 19196.94 19196.94 18967.30 18967.30 19245.00 19245.00
4.055556
4.055556       19104.82       19104.82 19006.63 19006.63 19203.01 19203.01 18954.65 18954.65 19254.99 19254.99
4.066667
4.066667       19104.60       19104.60 18999.52 18999.52 19209.67 19209.67 18943.89 18943.89 19265.30 19265.30
4.077778
4.077778       19104.69       19104.69 18993.15 18993.15 19216.23 19216.23 18934.11 18934.11 19275.28 19275.28
4.088889
4.088889       19105.18       19105.18 18987.54 18987.54 19222.83 19222.83 18925.26 18925.26 19285.11 19285.11
4.100000
4.100000       19106.66       19106.66 18983.21 18983.21 19230.11 19230.11 18917.86 18917.86 19295.46 19295.46
4.111111
4.111111       19105.39       19105.39 18976.39 18976.39 19234.38 19234.38 18908.11 18908.11 19302.67 19302.67
4.122222
4.122222       19105.85       19105.85 18971.54 18971.54 19240.16 19240.16 18900.44 18900.44 19311.26 19311.26
4.133333
4.133333       19107.77       19107.77 18968.35 18968.35 19247.20 19247.20 18894.54 18894.54 19321.00 19321.00
4.144444
4.144444       19104.80       19104.80 18960.44 18960.44 19249.15 19249.15 18884.02 18884.02 19325.57 19325.57
4.155556
4.155556       19106.24       19106.24 18957.12 18957.12 19255.37 19255.37 18878.18 18878.18 19334.31 19334.31
4.166667
4.166667       19211.13       19211.13 19057.38 19057.38 19364.88 19364.88 18976.00 18976.00 19446.27 19446.27
4.177778
4.177778       19273.33       19273.33 19115.10 19115.10 19431.57 19431.57 19031.34 19031.34 19515.33 19515.33
4.188889
4.188889       19204.16       19204.16 19041.57 19041.57 19366.76 19366.76 18955.49 18955.49 19452.83 19452.83
4.200000
4.200000       19163.03       19163.03 18996.19 18996.19 19329.88 19329.88 18907.86 18907.86 19418.20 19418.20
4.211111
4.211111       19137.52       19137.52 18966.54 18966.54 19308.51 19308.51 18876.02 18876.02 19399.02 19399.02
4.222222
4.222222       19123.41       19123.41 18948.38 18948.38 19298.45 19298.45 18855.72 18855.72 19391.10 19391.10
4.233333
4.233333       19113.72       19113.72 18934.74 18934.74 19292.71 19292.71 18839.99 18839.99 19387.46 19387.46
4.244444
4.244444       19108.43       19108.43 18925.58 18925.58 19291.28 19291.28 18828.78 18828.78 19388.08 19388.08
4.255556
4.255556       19107.85       19107.85 18921.21 18921.21 19294.49 19294.49 18822.41 18822.41 19393.30 19393.30
4.266667
4.266667       19107.03       19107.03 18916.67 18916.67 19297.38 19297.38 18815.91 18815.91 19398.15 19398.15
4.277778
4.277778       19106.01       19106.01 18912.02 18912.02 19300.01 19300.01 18809.32 18809.32 19402.70 19402.70
4.288889
4.288889       19107.89       19107.89 18910.32 18910.32 19305.47 19305.47 18805.74 18805.74 19410.05 19410.05
4.300000
4.300000       19107.98       19107.98 18906.89 18906.89 19309.06 19309.06 18800.45 18800.45 19415.50 19415.50
4.311111
4.311111       19109.27       19109.27 18904.74 18904.74 19313.80 19313.80 18796.46 18796.46 19422.07 19422.07
4.322222
4.322222       19107.11       19107.11 18899.19 18899.19 19315.04 19315.04 18789.12 18789.12 19425.11 19425.11
4.333333
4.333333       19107.36       19107.36 18896.10 18896.10 19318.62 19318.62 18784.26 18784.26 19430.46 19430.46
4.344444
4.344444       19107.02       19107.02 18892.47 18892.47 19321.57 19321.57 18778.90 18778.90 19435.15 19435.15
4.355556
4.355556       19105.04       19105.04 18887.25 18887.25 19322.83 19322.83 18771.96 18771.96 19438.12 19438.12
4.366667
4.366667       19104.51       19104.51 18883.53 18883.53 19325.49 19325.49 18766.55 18766.55 19442.47 19442.47
4.377778
4.377778       19103.94       19103.94 18879.82 18879.82 19328.06 19328.06 18761.17 18761.17 19446.71 19446.71
4.388889
4.388889       19107.63       19107.63 18880.41 18880.41 19334.86 19334.86 18760.12 18760.12 19455.14 19455.14
4.400000
4.400000       19106.27       19106.27 18875.98 18875.98 19336.55 19336.55 18754.08 18754.08 19458.46 19458.46
4.411111
4.411111       19106.09       19106.09 18872.78 18872.78 19339.39 19339.39 18749.28 18749.28 19462.89 19462.89
4.422222
4.422222       19210.33       19210.33 18974.04 18974.04 19446.61 19446.61 18848.96 18848.96 19571.69 19571.69
4.433333
4.433333       19272.12       19272.12 19032.89 19032.89 19511.34 19511.34 18906.25 18906.25 19637.98 19637.98
4.444444
4.444444       19307.78       19307.78 19065.64 19065.64 19549.91 19549.91 18937.46 18937.46 19678.09 19678.09
4.455556
4.455556       19329.27       19329.27 19084.26 19084.26 19574.28 19574.28 18954.56 18954.56 19703.98 19703.98
4.466667
4.466667       19238.01       19238.01 18990.16 18990.16 19485.86 19485.86 18858.96 18858.96 19617.06 19617.06
4.477778
4.477778       19181.64       19181.64 18930.98 18930.98 19432.29 19432.29 18798.29 18798.29 19564.98 19564.98
4.488889
4.488889       19150.58       19150.58 18897.14 18897.14 19404.01 19404.01 18762.99 18762.99 19538.17 19538.17
4.500000
4.500000       19129.96       19129.96 18873.79 18873.79 19386.14 19386.14 18738.17 18738.17 19521.75 19521.75
4.511111
4.511111       19117.29       19117.29 18858.40 18858.40 19376.19 19376.19 18721.35 18721.35 19513.24 19513.24
4.522222
4.522222       19109.58       19109.58 18847.99 18847.99 19371.16 19371.16 18709.52 18709.52 19509.64 19509.64
4.533333
4.533333       19104.64       19104.64 18840.40 18840.40 19368.89 19368.89 18700.51 18700.51 19508.77 19508.77
4.544444
4.544444       19100.82       19100.82 18833.94 18833.94 19367.70 19367.70 18692.66 18692.66 19508.98 19508.98
4.555556
4.555556       19100.33       19100.33 18830.84 18830.84 19369.82 19369.82 18688.18 18688.18 19512.48 19512.48
4.566667
4.566667       19100.42       19100.42 18828.35 18828.35 19372.50 19372.50 18684.32 18684.32 19516.53 19516.53
4.577778
4.577778       19102.09       19102.09 18827.46 18827.46 19376.73 19376.73 18682.07 18682.07 19522.11 19522.11
4.588889
4.588889       19141.90       19141.90 18864.72 18864.72 19419.07 19419.07 18718.00 18718.00 19565.79 19565.79


Forecast method: HoltWinters
Forecast method: HoltWinters

Model Information:


Model Information:
Holt-Winters exponential smoothingHolt-Winters exponential smoothing  withwith  trend andtrend and  additiveadditive  seasonal component.seasonal component.

Call:


Call:
HoltWinters(x = metricsts)HoltWinters(x = metricsts)



Smoothing parameters:
Smoothing parameters:
 alpha:  alpha: 0.47114490.4711449

 beta :  beta : 00

 gamma:  gamma: 0.54389330.5438933



Coefficients:
Coefficients:
              [,1]        [,1]
a  
a   15254.13085 15254.13085
b  
b     -16.66229   -16.66229
s1 
s1    261.01499   261.01499
s2 
s2    326.01909   326.01909
s3 
s3     56.23432    56.23432
s4 
s4    806.83106   806.83106
s5 
s5   1301.83319  1301.83319
s6 
s6   1069.16734  1069.16734
s7 
s7    657.44564   657.44564
s8 
s8   1147.64606  1147.64606
s9 
s9    917.57953   917.57953
s10
s10   367.20663   367.20663
s11
s11   743.27261   743.27261
s12
s12  1297.80229  1297.80229
s13
s13  1357.30539  1357.30539
s14
s14  1086.16659  1086.16659
s15
s15   888.01869   888.01869
s16
s16   274.85914   274.85914
s17
s17   827.24898   827.24898
s18
s18   904.10463   904.10463
s19
s19  1048.69501  1048.69501
s20
s20  1380.47171  1380.47171
s21
s21  1708.73226  1708.73226
s22
s22  1398.39099  1398.39099
s23
s23  2337.50196  2337.50196
s24
s24  3138.59245  3138.59245
s25
s25  3354.87349  3354.87349
s26
s26  3835.29912  3835.29912
s27
s27  4159.91869  4159.91869
s28
s28  4377.52104  4377.52104
s29
s29  4479.27870  4479.27870
s30
s30  5202.63772  5202.63772
s31
s31  4345.00437  4345.00437
s32
s32  3333.42196  3333.42196
s33
s33  3902.86545  3902.86545
s34
s34  3823.89522  3823.89522
s35
s35  3492.89499  3492.89499
s36
s36  3701.61779  3701.61779
s37
s37  3749.31940  3749.31940
s38
s38  3780.88423  3780.88423
s39
s39  3538.78749  3538.78749
s40
s40  3782.99391  3782.99391
s41
s41  3196.17329  3196.17329
s42
s42  2604.64173  2604.64173
s43
s43  2549.22818  2549.22818
s44
s44  1026.38751  1026.38751
s45
s45   198.28901   198.28901
s46
s46  -180.34842  -180.34842
s47
s47  -196.29002  -196.29002
s48
s48 -1617.31044 -1617.31044
s49
s49 -2058.25944 -2058.25944
s50
s50 -2759.45597 -2759.45597
s51
s51 -2021.93705 -2021.93705
s52
s52 -2384.80224 -2384.80224
s53
s53 -2299.72654 -2299.72654
s54
s54 -2464.04488 -2464.04488
s55
s55 -1418.53032 -1418.53032
s56
s56  -666.85322  -666.85322
s57
s57  -694.07269  -694.07269
s58
s58  -993.80795  -993.80795
s59
s59 -1066.68244 -1066.68244
s60
s60 -1580.26228 -1580.26228
s61
s61 -2214.37867 -2214.37867
s62
s62 -2668.77294 -2668.77294
s63
s63 -3001.80144 -3001.80144
s64
s64 -2179.11483 -2179.11483
s65
s65 -1999.52626 -1999.52626
s66
s66 -3047.45915 -3047.45915
s67
s67 -3135.86009 -3135.86009
s68
s68 -2702.95032 -2702.95032
s69
s69 -2142.73298 -2142.73298
s70
s70 -3844.95158 -3844.95158
s71
s71 -3860.86071 -3860.86071
s72
s72 -3485.63733 -3485.63733
s73
s73 -2597.47828 -2597.47828
s74
s74 -3736.18141 -3736.18141
s75
s75 -3622.37963 -3622.37963
s76
s76 -2733.21205 -2733.21205
s77
s77 -2465.26233 -2465.26233
s78
s78 -2516.31504 -2516.31504
s79
s79 -2369.30261 -2369.30261
s80
s80 -2512.61816 -2512.61816
s81
s81 -2193.61662 -2193.61662
s82
s82 -1554.08288 -1554.08288
s83
s83 -2326.80037 -2326.80037
s84
s84 -2287.09308 -2287.09308
s85
s85 -1671.60467 -1671.60467
s86
s86 -1889.77027 -1889.77027
s87
s87 -1800.83416 -1800.83416
s88
s88 -1607.05831 -1607.05831
s89
s89  -644.00338  -644.00338
s90
s90   150.80183   150.80183


Error measures:

Error measures:
                             ME     ME     RMSE     RMSE      MAE      MAE        MPE        MPE     MAPE     MAPE      MASE      MASE
Training set
Training set 25.133 25.133 1463.277 1463.277 1052.408 1052.408 0.09536784 0.09536784 7.153583 7.153583 0.4228986 0.4228986


Forecasts:

Forecasts:
                 Point Forecast Point Forecast     Lo 80     Lo 80    Hi 80    Hi 80     Lo 95     Lo 95    Hi 95    Hi 95
6.111111
6.111111       15498.48       15498.48 13620.957 13620.957 17376.01 17376.01 12627.054 12627.054 18369.91 18369.91
6.122222
6.122222       15546.83       15546.83 13471.349 13471.349 17622.30 17622.30 12372.659 12372.659 18720.99 18720.99
6.133333
6.133333       15260.38       15260.38 13004.254 13004.254 17516.50 17516.50 11809.935 11809.935 18710.82 18710.82
6.144444
6.144444       15994.31       15994.31 13570.970 13570.970 18417.66 18417.66 12288.130 12288.130 19700.50 19700.50
6.155556
6.155556       16472.65       16472.65 13892.908 13892.908 19052.40 19052.40 12527.273 12527.273 20418.03 20418.03
6.166667
6.166667       16223.32       16223.32 13496.132 13496.132 18950.52 18950.52 12052.444 12052.444 20394.21 20394.21
6.177778
6.177778       15794.94       15794.94 12927.874 12927.874 18662.01 18662.01 11410.140 11410.140 20179.74 20179.74
6.188889
6.188889       16268.48       16268.48 13268.051 13268.051 19268.91 19268.91 11679.720 11679.720 20857.24 20857.24
6.200000
6.200000       16021.75       16021.75 12893.642 12893.642 19149.86 19149.86 11237.721 11237.721 20805.78 20805.78
6.211111
6.211111       15454.71       15454.71 12203.937 12203.937 18705.49 18705.49 10483.079 10483.079 20426.35 20426.35
6.222222
6.222222       15814.12       15814.12 12445.135 12445.135 19183.10 19183.10 10661.703 10661.703 20966.53 20966.53
6.233333
6.233333       16351.99       16351.99 12868.806 12868.806 19835.17 19835.17 11024.921 11024.921 21679.05 21679.05
6.244444
6.244444       16394.83       16394.83 12801.077 12801.077 19988.58 19988.58 10898.660 10898.660 21890.99 21890.99
6.255556
6.255556       16107.03       16107.03 12406.008 12406.008 19808.04 19808.04 10446.807 10446.807 21767.24 21767.24
6.266667
6.266667       15892.22       15892.22 12086.952 12086.952 19697.48 19697.48 10072.568 10072.568 21711.86 21711.86
6.277778
6.277778       15262.39       15262.39 11355.666 11355.666 19169.12 19169.12  9287.569  9287.569 21237.22 21237.22
6.288889
6.288889       15798.12       15798.12 11792.498 11792.498 19803.74 19803.74  9672.049  9672.049 21924.19 21924.19
6.300000
6.300000       15858.31       15858.31 11756.180 11756.180 19960.45 19960.45  9584.641  9584.641 22131.99 22131.99
6.311111
6.311111       15986.24       15986.24 11789.815 11789.815 20182.67 20182.67  9568.360  9568.360 22404.12 22404.12
6.322222
6.322222       16301.36       16301.36 12012.709 12012.709 20590.00 20590.00  9742.436  9742.436 22860.28 22860.28
6.333333
6.333333       16612.96       16612.96 12234.029 12234.029 20991.88 20991.88  9915.966  9915.966 23309.94 23309.94
6.344444
6.344444       16285.95       16285.95 11818.571 11818.571 20753.33 20753.33  9453.683  9453.683 23118.22 23118.22
6.355556
6.355556       17208.40       17208.40 12654.283 12654.283 21762.52 21762.52 10243.479 10243.479 24173.32 24173.32
6.366667
6.366667       17992.83       17992.83 13353.596 13353.596 22632.06 22632.06 10897.735 10897.735 25087.92 25087.92
6.377778
6.377778       18192.45       18192.45 13469.633 13469.633 22915.26 22915.26 10969.527 10969.527 25415.37 25415.37
6.388889
6.388889       18656.21       18656.21 13851.269 13851.269 23461.15 23461.15 11307.686 11307.686 26004.73 26004.73
6.400000
6.400000       18964.17       18964.17 14078.479 14078.479 23849.86 23849.86 11492.151 11492.151 26436.18 26436.18
6.411111
6.411111       19165.11       19165.11 14199.984 14199.984 24130.23 24130.23 11571.607 11571.607 26758.61 26758.61
6.422222
6.422222       19250.20       19250.20 14206.896 14206.896 24293.51 24293.51 11537.131 11537.131 26963.28 26963.28
6.433333
6.433333       19956.90       19956.90 14836.603 14836.603 25077.20 25077.20 12126.082 12126.082 27787.72 27787.72
6.444444
6.444444       19082.60       19082.60 13886.458 13886.458 24278.75 24278.75 11135.784 11135.784 27029.42 27029.42
6.455556
6.455556       18054.36       18054.36 12783.456 12783.456 23325.26 23325.26  9993.208  9993.208 26115.51 26115.51
6.466667
6.466667       18607.14       18607.14 13262.524 13262.524 23951.76 23951.76 10433.256 10433.256 26781.03 26781.03
6.477778
6.477778       18511.51       18511.51 13094.183 13094.183 23928.83 23928.83 10226.424 10226.424 26796.59 26796.59
6.488889
6.488889       18163.85       18163.85 12674.774 12674.774 23652.92 23652.92  9769.034  9769.034 26558.66 26558.66
6.500000
6.500000       18355.91       18355.91 12796.014 12796.014 23915.80 23915.80  9852.784  9852.784 26859.03 26859.03
6.511111
6.511111       18386.95       18386.95 12757.123 12757.123 24016.77 24016.77  9776.875  9776.875 26997.02 26997.02
6.522222
6.522222       18401.85       18401.85 12702.954 12702.954 24100.74 24100.74  9686.142  9686.142 27117.55 27117.55
6.533333
6.533333       18143.09       18143.09 12375.950 12375.950 23910.23 23910.23  9323.012  9323.012 26963.17 26963.17
6.544444
6.544444       18370.63       18370.63 12536.048 12536.048 24205.22 24205.22  9447.405  9447.405 27293.86 27293.86
6.555556
6.555556       17767.15       17767.15 11865.890 11865.890 23668.41 23668.41  8741.951  8741.951 26792.35 26792.35
6.566667
6.566667       17158.96       17158.96 11191.765 11191.765 23126.15 23126.15  8032.925  8032.925 26284.99 26284.99
6.577778
6.577778       17086.88       17086.88 11054.479 11054.479 23119.28 23119.28  7861.119  7861.119 26312.64 26312.64
6.588889
6.588889       15547.38       15547.38  9450.464  9450.464 21644.29 21644.29  6222.952  6222.952 24871.80 24871.80
6.600000
6.600000       14702.62       14702.62  8541.866  8541.866 20863.37 20863.37  5280.561  5280.561 24124.67 24124.67
6.611111
6.611111       14307.32       14307.32  8083.384  8083.384 20531.25 20531.25  4788.632  4788.632 23826.00 23826.00
6.622222
6.622222       14274.71       14274.71  7988.232  7988.232 20561.19 20561.19  4660.370  4660.370 23889.06 23889.06
6.633333
6.633333       12837.03       12837.03  6488.618  6488.618 19185.44 19185.44  3127.972  3127.972 22546.09 22546.09
6.644444
6.644444       12379.42       12379.42  5969.674  5969.674 18789.16 18789.16  2576.560  2576.560 22182.28 22182.28
6.655556
6.655556       11661.56       11661.56  5191.064  5191.064 18132.06 18132.06  1765.790  1765.790 21557.33 21557.33



	Box-Ljung test	Box-Ljung test



data:  data:  metricsforecast2$residualsmetricsforecast2$residuals

X-squared = 109.0814, df = 20, p-value = 2.887e-14X-squared = 109.0814, df = 20, p-value = 2.887e-14



No documentation for ‘HoltWinter’ in specified packages and libraries:
you could try ‘??HoltWinter’
No documentation for ‘HoltWinter’ in specified packages and libraries:
you could try ‘??HoltWinter’
function (x, alpha = NULL, beta = NULL, gamma = NULL, seasonal = c("additive", 
function (x, alpha = NULL, beta = NULL, gamma = NULL, seasonal = c("additive", 
    "multiplicative"), start.periods = 2, l.start = NULL, b.start = NULL, 
    "multiplicative"), start.periods = 2, l.start = NULL, b.start = NULL, 
    s.start = NULL, optim.start = c(alpha = 0.3, beta = 0.1, 
    s.start = NULL, optim.start = c(alpha = 0.3, beta = 0.1, 
        gamma = 0.1), optim.control = list()) 
        gamma = 0.1), optim.control = list()) 
{
{
    x <- as.ts(x)
    x <- as.ts(x)
    seasonal <- match.arg(seasonal)
    seasonal <- match.arg(seasonal)
    f <- frequency(x)
    f <- frequency(x)
    if (!is.null(alpha) && (alpha == 0)) 
    if (!is.null(alpha) && (alpha == 0)) 
        stop("cannot fit models without level ('alpha' must not be 0 or FALSE)")
        stop("cannot fit models without level ('alpha' must not be 0 or FALSE)")
    if (!all(is.null(c(alpha, beta, gamma))) && any(c(alpha, 
    if (!all(is.null(c(alpha, beta, gamma))) && any(c(alpha, 
        beta, gamma) < 0 || c(alpha, beta, gamma) > 1)) 
        beta, gamma) < 0 || c(alpha, beta, gamma) > 1)) 
        stop("'alpha', 'beta' and 'gamma' must be within the unit interval")
        stop("'alpha', 'beta' and 'gamma' must be within the unit interval")
    if ((is.null(gamma) || gamma > 0)) {
    if ((is.null(gamma) || gamma > 0)) {
        if (seasonal == "multiplicative" && any(x == 0)) 
        if (seasonal == "multiplicative" && any(x == 0)) 
            stop("data must be non-zero for multiplicative Holt-Winters")
            stop("data must be non-zero for multiplicative Holt-Winters")
        if (start.periods < 2) 
        if (start.periods < 2) 
            stop("need at least 2 periods to compute seasonal start values")
            stop("need at least 2 periods to compute seasonal start values")
    }
    }
    if (!is.null(gamma) && is.logical(gamma) && !gamma) {
    if (!is.null(gamma) && is.logical(gamma) && !gamma) {
        expsmooth <- !is.null(beta) && is.logical(beta) && !beta
        expsmooth <- !is.null(beta) && is.logical(beta) && !beta
        if (is.null(l.start)) 
        if (is.null(l.start)) 
            l.start <- if (expsmooth) 
            l.start <- if (expsmooth) 
                x[1L]
                x[1L]
            else x[2L]
            else x[2L]
        if (is.null(b.start)) 
        if (is.null(b.start)) 
            if (is.null(beta) || !is.logical(beta) || beta) 
            if (is.null(beta) || !is.logical(beta) || beta) 
                b.start <- x[2L] - x[1L]
                b.start <- x[2L] - x[1L]
        start.time <- 3 - expsmooth
        start.time <- 3 - expsmooth
        s.start <- 0
        s.start <- 0
    }
    }
    else {
    else {
        start.time <- f + 1
        start.time <- f + 1
        wind <- start.periods * f
        wind <- start.periods * f
        st <- decompose(ts(x[1L:wind], start = start(x), frequency = f), 
        st <- decompose(ts(x[1L:wind], start = start(x), frequency = f), 
            seasonal)
            seasonal)
        dat <- na.omit(st$trend)
        dat <- na.omit(st$trend)
        m <- lm(dat ~ seq_along(dat))
        m <- lm(dat ~ seq_along(dat))
        if (is.null(l.start)) 
        if (is.null(l.start)) 
            l.start <- as.vector(coef(m)[1L])
            l.start <- as.vector(coef(m)[1L])
        if (is.null(b.start)) 
        if (is.null(b.start)) 
            b.start <- as.vector(coef(m)[2L])
            b.start <- as.vector(coef(m)[2L])
        if (is.null(s.start)) 
        if (is.null(s.start)) 
            s.start <- st$figure
            s.start <- st$figure
    }
    }
    lenx <- as.integer(length(x))
    lenx <- as.integer(length(x))
    if (is.na(lenx)) 
    if (is.na(lenx)) 
        stop("invalid length(x)")
        stop("invalid length(x)")
    len <- lenx - start.time + 1
    len <- lenx - start.time + 1
    hw <- function(alpha, beta, gamma) .C(C_HoltWinters, as.double(x), 
    hw <- function(alpha, beta, gamma) .C(C_HoltWinters, as.double(x), 
        lenx, as.double(max(min(alpha, 1), 0)), as.double(max(min(beta, 
        lenx, as.double(max(min(alpha, 1), 0)), as.double(max(min(beta, 
            1), 0)), as.double(max(min(gamma, 1), 0)), as.integer(start.time), 
            1), 0)), as.double(max(min(gamma, 1), 0)), as.integer(start.time), 
        as.integer(!+(seasonal == "multiplicative")), as.integer(f), 
        as.integer(!+(seasonal == "multiplicative")), as.integer(f), 
        as.integer(!is.logical(beta) || beta), as.integer(!is.logical(gamma) || 
        as.integer(!is.logical(beta) || beta), as.integer(!is.logical(gamma) || 
            gamma), a = as.double(l.start), b = as.double(b.start), 
            gamma), a = as.double(l.start), b = as.double(b.start), 
        s = as.double(s.start), SSE = as.double(0), level = double(len + 
        s = as.double(s.start), SSE = as.double(0), level = double(len + 
            1L), trend = double(len + 1L), seasonal = double(len + 
            1L), trend = double(len + 1L), seasonal = double(len + 
            f))
            f))
    if (is.null(gamma)) {
    if (is.null(gamma)) {
        if (is.null(alpha)) {
        if (is.null(alpha)) {
            if (is.null(beta)) {
            if (is.null(beta)) {
                error <- function(p) hw(p[1L], p[2L], p[3L])$SSE
                error <- function(p) hw(p[1L], p[2L], p[3L])$SSE
                sol <- optim(optim.start, error, method = "L-BFGS-B", 
                sol <- optim(optim.start, error, method = "L-BFGS-B", 
                  lower = c(0, 0, 0), upper = c(1, 1, 1), control = optim.control)
                  lower = c(0, 0, 0), upper = c(1, 1, 1), control = optim.control)
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                  1)) {
                  1)) {
                  if (sol$convergence > 50) {
                  if (sol$convergence > 50) {
                    warning(gettextf("optimization difficulties: %s", 
                    warning(gettextf("optimization difficulties: %s", 
                      sol$message), domain = NA)
                      sol$message), domain = NA)
                  }
                  }
                  else stop("optimization failure")
                  else stop("optimization failure")
                }
                }
                alpha <- sol$par[1L]
                alpha <- sol$par[1L]
                beta <- sol$par[2L]
                beta <- sol$par[2L]
                gamma <- sol$par[3L]
                gamma <- sol$par[3L]
            }
            }
            else {
            else {
                error <- function(p) hw(p[1L], beta, p[2L])$SSE
                error <- function(p) hw(p[1L], beta, p[2L])$SSE
                sol <- optim(c(optim.start["alpha"], optim.start["gamma"]), 
                sol <- optim(c(optim.start["alpha"], optim.start["gamma"]), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  upper = c(1, 1), control = optim.control)
                  upper = c(1, 1), control = optim.control)
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                  1)) {
                  1)) {
                  if (sol$convergence > 50) {
                  if (sol$convergence > 50) {
                    warning(gettextf("optimization difficulties: %s", 
                    warning(gettextf("optimization difficulties: %s", 
                      sol$message), domain = NA)
                      sol$message), domain = NA)
                  }
                  }
                  else stop("optimization failure")
                  else stop("optimization failure")
                }
                }
                alpha <- sol$par[1L]
                alpha <- sol$par[1L]
                gamma <- sol$par[2L]
                gamma <- sol$par[2L]
            }
            }
        }
        }
        else {
        else {
            if (is.null(beta)) {
            if (is.null(beta)) {
                error <- function(p) hw(alpha, p[1L], p[2L])$SSE
                error <- function(p) hw(alpha, p[1L], p[2L])$SSE
                sol <- optim(c(optim.start["beta"], optim.start["gamma"]), 
                sol <- optim(c(optim.start["beta"], optim.start["gamma"]), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  upper = c(1, 1), control = optim.control)
                  upper = c(1, 1), control = optim.control)
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                  1)) {
                  1)) {
                  if (sol$convergence > 50) {
                  if (sol$convergence > 50) {
                    warning(gettextf("optimization difficulties: %s", 
                    warning(gettextf("optimization difficulties: %s", 
                      sol$message), domain = NA)
                      sol$message), domain = NA)
                  }
                  }
                  else stop("optimization failure")
                  else stop("optimization failure")
                }
                }
                beta <- sol$par[1L]
                beta <- sol$par[1L]
                gamma <- sol$par[2L]
                gamma <- sol$par[2L]
            }
            }
            else {
            else {
                error <- function(p) hw(alpha, beta, p)$SSE
                error <- function(p) hw(alpha, beta, p)$SSE
                gamma <- optimize(error, lower = 0, upper = 1)$minimum
                gamma <- optimize(error, lower = 0, upper = 1)$minimum
            }
            }
        }
        }
    }
    }
    else {
    else {
        if (is.null(alpha)) {
        if (is.null(alpha)) {
            if (is.null(beta)) {
            if (is.null(beta)) {
                error <- function(p) hw(p[1L], p[2L], gamma)$SSE
                error <- function(p) hw(p[1L], p[2L], gamma)$SSE
                sol <- optim(c(optim.start["alpha"], optim.start["beta"]), 
                sol <- optim(c(optim.start["alpha"], optim.start["beta"]), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  upper = c(1, 1), control = optim.control)
                  upper = c(1, 1), control = optim.control)
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                  1)) {
                  1)) {
                  if (sol$convergence > 50) {
                  if (sol$convergence > 50) {
                    warning(gettextf("optimization difficulties: %s", 
                    warning(gettextf("optimization difficulties: %s", 
                      sol$message), domain = NA)
                      sol$message), domain = NA)
                  }
                  }
                  else stop("optimization failure")
                  else stop("optimization failure")
                }
                }
                alpha <- sol$par[1L]
                alpha <- sol$par[1L]
                beta <- sol$par[2L]
                beta <- sol$par[2L]
            }
            }
            else {
            else {
                error <- function(p) hw(p, beta, gamma)$SSE
                error <- function(p) hw(p, beta, gamma)$SSE
                alpha <- optimize(error, lower = 0, upper = 1)$minimum
                alpha <- optimize(error, lower = 0, upper = 1)$minimum
            }
            }
        }
        }
        else {
        else {
            if (is.null(beta)) {
            if (is.null(beta)) {
                error <- function(p) hw(alpha, p, gamma)$SSE
                error <- function(p) hw(alpha, p, gamma)$SSE
                beta <- optimize(error, lower = 0, upper = 1)$minimum
                beta <- optimize(error, lower = 0, upper = 1)$minimum
            }
            }
        }
        }
    }
    }
    final.fit <- hw(alpha, beta, gamma)
    final.fit <- hw(alpha, beta, gamma)
    fitted <- ts(cbind(xhat = final.fit$level[-len - 1], level = final.fit$level[-len - 
    fitted <- ts(cbind(xhat = final.fit$level[-len - 1], level = final.fit$level[-len - 
        1], trend = if (!is.logical(beta) || beta) 
        1], trend = if (!is.logical(beta) || beta) 
        final.fit$trend[-len - 1], season = if (!is.logical(gamma) || 
        final.fit$trend[-len - 1], season = if (!is.logical(gamma) || 
        gamma) 
        gamma) 
        final.fit$seasonal[1L:len]), start = start(lag(x, k = 1 - 
        final.fit$seasonal[1L:len]), start = start(lag(x, k = 1 - 
        start.time)), frequency = frequency(x))
        start.time)), frequency = frequency(x))
    if (!is.logical(beta) || beta) 
    if (!is.logical(beta) || beta) 
        fitted[, 1] <- fitted[, 1] + fitted[, "trend"]
        fitted[, 1] <- fitted[, 1] + fitted[, "trend"]
    if (!is.logical(gamma) || gamma) 
    if (!is.logical(gamma) || gamma) 
        fitted[, 1] <- if (seasonal == "multiplicative") 
        fitted[, 1] <- if (seasonal == "multiplicative") 
            fitted[, 1] * fitted[, "season"]
            fitted[, 1] * fitted[, "season"]
        else fitted[, 1] + fitted[, "season"]
        else fitted[, 1] + fitted[, "season"]
    structure(list(fitted = fitted, x = x, alpha = alpha, beta = beta, 
    structure(list(fitted = fitted, x = x, alpha = alpha, beta = beta, 
        gamma = gamma, coefficients = c(a = final.fit$level[len + 
        gamma = gamma, coefficients = c(a = final.fit$level[len + 
            1], b = if (!is.logical(beta) || beta) final.fit$trend[len + 
            1], b = if (!is.logical(beta) || beta) final.fit$trend[len + 
            1], s = if (!is.logical(gamma) || gamma) final.fit$seasonal[len + 
            1], s = if (!is.logical(gamma) || gamma) final.fit$seasonal[len + 
            1L:f]), seasonal = seasonal, SSE = final.fit$SSE, 
            1L:f]), seasonal = seasonal, SSE = final.fit$SSE, 
        call = match.call()), class = "HoltWinters")
        call = match.call()), class = "HoltWinters")
}
}
<bytecode: 0x7fc7c0d81828>
<bytecode: 0x7fc7c0d81828>
<environment: namespace:stats>
<environment: namespace:stats>

Forecast method: HoltWinters
Forecast method: HoltWinters

Model Information:


Model Information:
Holt-Winters exponential smoothingHolt-Winters exponential smoothing  withwith  trend andtrend and  additiveadditive  seasonal component.seasonal component.

Call:


Call:
HoltWinters(x = metricsts)HoltWinters(x = metricsts)



Smoothing parameters:
Smoothing parameters:
 alpha:  alpha: 0.47114490.4711449

 beta :  beta : 00

 gamma:  gamma: 0.54389330.5438933



Coefficients:
Coefficients:
              [,1]        [,1]
a  
a   15254.13085 15254.13085
b  
b     -16.66229   -16.66229
s1 
s1    261.01499   261.01499
s2 
s2    326.01909   326.01909
s3 
s3     56.23432    56.23432
s4 
s4    806.83106   806.83106
s5 
s5   1301.83319  1301.83319
s6 
s6   1069.16734  1069.16734
s7 
s7    657.44564   657.44564
s8 
s8   1147.64606  1147.64606
s9 
s9    917.57953   917.57953
s10
s10   367.20663   367.20663
s11
s11   743.27261   743.27261
s12
s12  1297.80229  1297.80229
s13
s13  1357.30539  1357.30539
s14
s14  1086.16659  1086.16659
s15
s15   888.01869   888.01869
s16
s16   274.85914   274.85914
s17
s17   827.24898   827.24898
s18
s18   904.10463   904.10463
s19
s19  1048.69501  1048.69501
s20
s20  1380.47171  1380.47171
s21
s21  1708.73226  1708.73226
s22
s22  1398.39099  1398.39099
s23
s23  2337.50196  2337.50196
s24
s24  3138.59245  3138.59245
s25
s25  3354.87349  3354.87349
s26
s26  3835.29912  3835.29912
s27
s27  4159.91869  4159.91869
s28
s28  4377.52104  4377.52104
s29
s29  4479.27870  4479.27870
s30
s30  5202.63772  5202.63772
s31
s31  4345.00437  4345.00437
s32
s32  3333.42196  3333.42196
s33
s33  3902.86545  3902.86545
s34
s34  3823.89522  3823.89522
s35
s35  3492.89499  3492.89499
s36
s36  3701.61779  3701.61779
s37
s37  3749.31940  3749.31940
s38
s38  3780.88423  3780.88423
s39
s39  3538.78749  3538.78749
s40
s40  3782.99391  3782.99391
s41
s41  3196.17329  3196.17329
s42
s42  2604.64173  2604.64173
s43
s43  2549.22818  2549.22818
s44
s44  1026.38751  1026.38751
s45
s45   198.28901   198.28901
s46
s46  -180.34842  -180.34842
s47
s47  -196.29002  -196.29002
s48
s48 -1617.31044 -1617.31044
s49
s49 -2058.25944 -2058.25944
s50
s50 -2759.45597 -2759.45597
s51
s51 -2021.93705 -2021.93705
s52
s52 -2384.80224 -2384.80224
s53
s53 -2299.72654 -2299.72654
s54
s54 -2464.04488 -2464.04488
s55
s55 -1418.53032 -1418.53032
s56
s56  -666.85322  -666.85322
s57
s57  -694.07269  -694.07269
s58
s58  -993.80795  -993.80795
s59
s59 -1066.68244 -1066.68244
s60
s60 -1580.26228 -1580.26228
s61
s61 -2214.37867 -2214.37867
s62
s62 -2668.77294 -2668.77294
s63
s63 -3001.80144 -3001.80144
s64
s64 -2179.11483 -2179.11483
s65
s65 -1999.52626 -1999.52626
s66
s66 -3047.45915 -3047.45915
s67
s67 -3135.86009 -3135.86009
s68
s68 -2702.95032 -2702.95032
s69
s69 -2142.73298 -2142.73298
s70
s70 -3844.95158 -3844.95158
s71
s71 -3860.86071 -3860.86071
s72
s72 -3485.63733 -3485.63733
s73
s73 -2597.47828 -2597.47828
s74
s74 -3736.18141 -3736.18141
s75
s75 -3622.37963 -3622.37963
s76
s76 -2733.21205 -2733.21205
s77
s77 -2465.26233 -2465.26233
s78
s78 -2516.31504 -2516.31504
s79
s79 -2369.30261 -2369.30261
s80
s80 -2512.61816 -2512.61816
s81
s81 -2193.61662 -2193.61662
s82
s82 -1554.08288 -1554.08288
s83
s83 -2326.80037 -2326.80037
s84
s84 -2287.09308 -2287.09308
s85
s85 -1671.60467 -1671.60467
s86
s86 -1889.77027 -1889.77027
s87
s87 -1800.83416 -1800.83416
s88
s88 -1607.05831 -1607.05831
s89
s89  -644.00338  -644.00338
s90
s90   150.80183   150.80183


Error measures:

Error measures:
                             ME     ME     RMSE     RMSE      MAE      MAE        MPE        MPE     MAPE     MAPE      MASE      MASE
Training set
Training set 25.133 25.133 1463.277 1463.277 1052.408 1052.408 0.09536784 0.09536784 7.153583 7.153583 0.4228986 0.4228986


Forecasts:

Forecasts:
                 Point Forecast Point Forecast     Lo 80     Lo 80    Hi 80    Hi 80     Lo 95     Lo 95    Hi 95    Hi 95
6.111111
6.111111       15498.48       15498.48 13620.957 13620.957 17376.01 17376.01 12627.054 12627.054 18369.91 18369.91
6.122222
6.122222       15546.83       15546.83 13471.349 13471.349 17622.30 17622.30 12372.659 12372.659 18720.99 18720.99
6.133333
6.133333       15260.38       15260.38 13004.254 13004.254 17516.50 17516.50 11809.935 11809.935 18710.82 18710.82
6.144444
6.144444       15994.31       15994.31 13570.970 13570.970 18417.66 18417.66 12288.130 12288.130 19700.50 19700.50
6.155556
6.155556       16472.65       16472.65 13892.908 13892.908 19052.40 19052.40 12527.273 12527.273 20418.03 20418.03
6.166667
6.166667       16223.32       16223.32 13496.132 13496.132 18950.52 18950.52 12052.444 12052.444 20394.21 20394.21
6.177778
6.177778       15794.94       15794.94 12927.874 12927.874 18662.01 18662.01 11410.140 11410.140 20179.74 20179.74
6.188889
6.188889       16268.48       16268.48 13268.051 13268.051 19268.91 19268.91 11679.720 11679.720 20857.24 20857.24
6.200000
6.200000       16021.75       16021.75 12893.642 12893.642 19149.86 19149.86 11237.721 11237.721 20805.78 20805.78
6.211111
6.211111       15454.71       15454.71 12203.937 12203.937 18705.49 18705.49 10483.079 10483.079 20426.35 20426.35
6.222222
6.222222       15814.12       15814.12 12445.135 12445.135 19183.10 19183.10 10661.703 10661.703 20966.53 20966.53
6.233333
6.233333       16351.99       16351.99 12868.806 12868.806 19835.17 19835.17 11024.921 11024.921 21679.05 21679.05
6.244444
6.244444       16394.83       16394.83 12801.077 12801.077 19988.58 19988.58 10898.660 10898.660 21890.99 21890.99
6.255556
6.255556       16107.03       16107.03 12406.008 12406.008 19808.04 19808.04 10446.807 10446.807 21767.24 21767.24
6.266667
6.266667       15892.22       15892.22 12086.952 12086.952 19697.48 19697.48 10072.568 10072.568 21711.86 21711.86
6.277778
6.277778       15262.39       15262.39 11355.666 11355.666 19169.12 19169.12  9287.569  9287.569 21237.22 21237.22
6.288889
6.288889       15798.12       15798.12 11792.498 11792.498 19803.74 19803.74  9672.049  9672.049 21924.19 21924.19
6.300000
6.300000       15858.31       15858.31 11756.180 11756.180 19960.45 19960.45  9584.641  9584.641 22131.99 22131.99
6.311111
6.311111       15986.24       15986.24 11789.815 11789.815 20182.67 20182.67  9568.360  9568.360 22404.12 22404.12
6.322222
6.322222       16301.36       16301.36 12012.709 12012.709 20590.00 20590.00  9742.436  9742.436 22860.28 22860.28
6.333333
6.333333       16612.96       16612.96 12234.029 12234.029 20991.88 20991.88  9915.966  9915.966 23309.94 23309.94
6.344444
6.344444       16285.95       16285.95 11818.571 11818.571 20753.33 20753.33  9453.683  9453.683 23118.22 23118.22
6.355556
6.355556       17208.40       17208.40 12654.283 12654.283 21762.52 21762.52 10243.479 10243.479 24173.32 24173.32
6.366667
6.366667       17992.83       17992.83 13353.596 13353.596 22632.06 22632.06 10897.735 10897.735 25087.92 25087.92
6.377778
6.377778       18192.45       18192.45 13469.633 13469.633 22915.26 22915.26 10969.527 10969.527 25415.37 25415.37
6.388889
6.388889       18656.21       18656.21 13851.269 13851.269 23461.15 23461.15 11307.686 11307.686 26004.73 26004.73
6.400000
6.400000       18964.17       18964.17 14078.479 14078.479 23849.86 23849.86 11492.151 11492.151 26436.18 26436.18
6.411111
6.411111       19165.11       19165.11 14199.984 14199.984 24130.23 24130.23 11571.607 11571.607 26758.61 26758.61
6.422222
6.422222       19250.20       19250.20 14206.896 14206.896 24293.51 24293.51 11537.131 11537.131 26963.28 26963.28
6.433333
6.433333       19956.90       19956.90 14836.603 14836.603 25077.20 25077.20 12126.082 12126.082 27787.72 27787.72
6.444444
6.444444       19082.60       19082.60 13886.458 13886.458 24278.75 24278.75 11135.784 11135.784 27029.42 27029.42
6.455556
6.455556       18054.36       18054.36 12783.456 12783.456 23325.26 23325.26  9993.208  9993.208 26115.51 26115.51
6.466667
6.466667       18607.14       18607.14 13262.524 13262.524 23951.76 23951.76 10433.256 10433.256 26781.03 26781.03
6.477778
6.477778       18511.51       18511.51 13094.183 13094.183 23928.83 23928.83 10226.424 10226.424 26796.59 26796.59
6.488889
6.488889       18163.85       18163.85 12674.774 12674.774 23652.92 23652.92  9769.034  9769.034 26558.66 26558.66
6.500000
6.500000       18355.91       18355.91 12796.014 12796.014 23915.80 23915.80  9852.784  9852.784 26859.03 26859.03
6.511111
6.511111       18386.95       18386.95 12757.123 12757.123 24016.77 24016.77  9776.875  9776.875 26997.02 26997.02
6.522222
6.522222       18401.85       18401.85 12702.954 12702.954 24100.74 24100.74  9686.142  9686.142 27117.55 27117.55
6.533333
6.533333       18143.09       18143.09 12375.950 12375.950 23910.23 23910.23  9323.012  9323.012 26963.17 26963.17
6.544444
6.544444       18370.63       18370.63 12536.048 12536.048 24205.22 24205.22  9447.405  9447.405 27293.86 27293.86
6.555556
6.555556       17767.15       17767.15 11865.890 11865.890 23668.41 23668.41  8741.951  8741.951 26792.35 26792.35
6.566667
6.566667       17158.96       17158.96 11191.765 11191.765 23126.15 23126.15  8032.925  8032.925 26284.99 26284.99
6.577778
6.577778       17086.88       17086.88 11054.479 11054.479 23119.28 23119.28  7861.119  7861.119 26312.64 26312.64
6.588889
6.588889       15547.38       15547.38  9450.464  9450.464 21644.29 21644.29  6222.952  6222.952 24871.80 24871.80
6.600000
6.600000       14702.62       14702.62  8541.866  8541.866 20863.37 20863.37  5280.561  5280.561 24124.67 24124.67
6.611111
6.611111       14307.32       14307.32  8083.384  8083.384 20531.25 20531.25  4788.632  4788.632 23826.00 23826.00
6.622222
6.622222       14274.71       14274.71  7988.232  7988.232 20561.19 20561.19  4660.370  4660.370 23889.06 23889.06
6.633333
6.633333       12837.03       12837.03  6488.618  6488.618 19185.44 19185.44  3127.972  3127.972 22546.09 22546.09
6.644444
6.644444       12379.42       12379.42  5969.674  5969.674 18789.16 18789.16  2576.560  2576.560 22182.28 22182.28
6.655556
6.655556       11661.56       11661.56  5191.064  5191.064 18132.06 18132.06  1765.790  1765.790 21557.33 21557.33


Forecast method: HoltWinters
Forecast method: HoltWinters

Model Information:


Model Information:
Holt-Winters exponential smoothingHolt-Winters exponential smoothing  withwith  trend andtrend and  additiveadditive  seasonal component.seasonal component.

Call:


Call:
HoltWinters(x = metricsts)HoltWinters(x = metricsts)



Smoothing parameters:
Smoothing parameters:
 alpha:  alpha: 0.83305470.8330547

 beta :  beta : 00

 gamma:  gamma: 11



Coefficients:
Coefficients:
              [,1]        [,1]
a  
a   23.98577143 23.98577143
b  
b    0.03827436  0.03827436
s1 
s1  -0.04208235 -0.04208235
s2 
s2  -0.07688888 -0.07688888
s3 
s3  -0.10413675 -0.10413675
s4 
s4  -0.01219131 -0.01219131
s5 
s5  -0.09274677 -0.09274677
s6 
s6  -0.15375648 -0.15375648
s7 
s7  -0.18999677 -0.18999677
s8 
s8  -0.21626814 -0.21626814
s9 
s9  -0.23952672 -0.23952672
s10
s10 -0.26199466 -0.26199466
s11
s11 -0.28427214 -0.28427214
s12
s12 -0.13956102 -0.13956102
s13
s13 -0.30086031 -0.30086031
s14
s14 -0.34630089 -0.34630089
s15
s15 -0.25654261 -0.25654261
s16
s16 -0.33724346 -0.33724346
s17
s17 -0.25915029 -0.25915029
s18
s18 -0.38801281 -0.38801281
s19
s19 -0.24841597 -0.24841597
s20
s20 -0.16008729 -0.16008729
s21
s21 -0.14831087 -0.14831087
s22
s22 -0.07740913 -0.07740913
s23
s23 -0.15109150 -0.15109150
s24
s24 -0.23875715 -0.23875715
s25
s25 -0.14347743 -0.14347743
s26
s26 -0.34393151 -0.34393151
s27
s27 -0.28540904 -0.28540904
s28
s28 -0.43796833 -0.43796833
s29
s29 -0.52910316 -0.52910316
s30
s30 -0.59383688 -0.59383688
s31
s31 -0.51239117 -0.51239117
s32
s32 -0.66102212 -0.66102212
s33
s33 -0.75147301 -0.75147301
s34
s34 -0.81608572 -0.81608572
s35
s35 -0.87369281 -0.87369281
s36
s36 -0.76006004 -0.76006004
s37
s37 -0.46603103 -0.46603103
s38
s38 -0.21354210 -0.21354210
s39
s39 -0.12808421 -0.12808421
s40
s40 -0.12848331 -0.12848331
s41
s41 -0.15997447 -0.15997447
s42
s42 -0.20094738 -0.20094738
s43
s43 -0.24452086 -0.24452086
s44
s44 -0.28875735 -0.28875735
s45
s45 -0.33315402 -0.33315402
s46
s46 -0.37491222 -0.37491222
s47
s47  0.06939202  0.06939202
s48
s48  0.49530202  0.49530202
s49
s49  0.50311164  0.50311164
s50
s50  0.64660931  0.64660931
s51
s51  0.47822291  0.47822291
s52
s52  0.42311309  0.42311309
s53
s53  0.38634569  0.38634569
s54
s54  0.35248658  0.35248658
s55
s55  0.31907602  0.31907602
s56
s56  0.28573204  0.28573204
s57
s57  0.25239739  0.25239739
s58
s58  0.21906393  0.21906393
s59
s59  0.18573060  0.18573060
s60
s60  0.15239727  0.15239727
s61
s61  0.28600922  0.28600922
s62
s62  0.22945805  0.22945805
s63
s63  0.11507535  0.11507535
s64
s64  0.18004772  0.18004772
s65
s65  0.10841067  0.10841067
s66
s66  0.01191671  0.01191671
s67
s67  0.07826852  0.07826852
s68
s68  0.41199631  0.41199631
s69
s69  0.74743508  0.74743508
s70
s70  0.79514056  0.79514056
s71
s71  0.75565855  0.75565855
s72
s72  0.70589465  0.70589465
s73
s73  0.65848810  0.65848810
s74
s74  0.61297593  0.61297593
s75
s75  0.56821096  0.56821096
s76
s76  0.52368003  0.52368003
s77
s77  0.47921386  0.47921386
s78
s78  0.43476423  0.43476423
s79
s79  0.39031860  0.39031860
s80
s80  0.34587389  0.34587389
s81
s81  0.30142939  0.30142939
s82
s82  0.25921386  0.25921386
s83
s83  0.22108780  0.22108780
s84
s84  0.18575411  0.18575411
s85
s85  0.15171523  0.15171523
s86
s86  0.11816052  0.11816052
s87
s87  0.22383800  0.22383800
s88
s88  0.19436357  0.19436357
s89
s89  0.09415438  0.09415438
s90
s90  0.01422857  0.01422857


Error measures:

Error measures:
                                 ME         ME      RMSE      RMSE       MAE       MAE       MPE       MPE     MAPE     MAPE       MASE       MASE
Training set
Training set 0.01546717 0.01546717 0.2757312 0.2757312 0.1139047 0.1139047 0.5691602 0.5691602 1.688553 1.688553 0.02882726 0.02882726


Forecasts:

Forecasts:
                 Point Forecast Point Forecast    Lo 80    Lo 80    Hi 80    Hi 80    Lo 95    Lo 95    Hi 95    Hi 95
6.300000
6.300000       23.98196       23.98196 23.62870 23.62870 24.33523 24.33523 23.44169 23.44169 24.52223 24.52223
6.311111
6.311111       23.98543       23.98543 23.52565 23.52565 24.44522 24.44522 23.28225 23.28225 24.68861 24.68861
6.322222
6.322222       23.99646       23.99646 23.45056 23.45056 24.54236 24.54236 23.16158 23.16158 24.83134 24.83134
6.333333
6.333333       24.12668       24.12668 23.50651 23.50651 24.74685 24.74685 23.17821 23.17821 25.07515 25.07515
6.344444
6.344444       24.08440       24.08440 23.39794 23.39794 24.77085 24.77085 23.03456 23.03456 25.13424 25.13424
6.355556
6.355556       24.06166       24.06166 23.31479 23.31479 24.80854 24.80854 22.91941 22.91941 25.20391 25.20391
6.366667
6.366667       24.06370       24.06370 23.26093 23.26093 24.86646 24.86646 22.83597 22.83597 25.29142 25.29142
6.377778
6.377778       24.07570       24.07570 23.22069 23.22069 24.93070 24.93070 22.76808 22.76808 25.38332 25.38332
6.388889
6.388889       24.09071       24.09071 23.18648 23.18648 24.99495 24.99495 22.70781 22.70781 25.47362 25.47362
6.400000
6.400000       24.10652       24.10652 23.15560 23.15560 25.05744 25.05744 22.65222 22.65222 25.56082 25.56082
6.411111
6.411111       24.12252       24.12252 23.12710 23.12710 25.11793 25.11793 22.60016 22.60016 25.64487 25.64487
6.422222
6.422222       24.30550       24.30550 23.26750 23.26750 25.34351 25.34351 22.71801 22.71801 25.89300 25.89300
6.433333
6.433333       24.18248       24.18248 23.10356 23.10356 25.26140 25.26140 22.53242 22.53242 25.83254 25.83254
6.444444
6.444444       24.17531       24.17531 23.05698 23.05698 25.29364 25.29364 22.46497 22.46497 25.88565 25.88565
6.455556
6.455556       24.30334       24.30334 23.14694 23.14694 25.45975 25.45975 22.53477 22.53477 26.07191 26.07191
6.466667
6.466667       24.26092       24.26092 23.06765 23.06765 25.45418 25.45418 22.43598 22.43598 26.08586 26.08586
6.477778
6.477778       24.37729       24.37729 23.14827 23.14827 25.60630 25.60630 22.49766 22.49766 26.25691 26.25691
6.488889
6.488889       24.28670       24.28670 23.02294 23.02294 25.55046 25.55046 22.35394 22.35394 26.21945 26.21945
6.500000
6.500000       24.46457       24.46457 23.16700 23.16700 25.76214 25.76214 22.48010 22.48010 26.44904 26.44904
6.511111
6.511111       24.59117       24.59117 23.26064 23.26064 25.92170 25.92170 22.55631 22.55631 26.62604 26.62604
6.522222
6.522222       24.64122       24.64122 23.27854 23.27854 26.00391 26.00391 22.55718 22.55718 26.72527 26.72527
6.533333
6.533333       24.75040       24.75040 23.35630 23.35630 26.14450 26.14450 22.61831 22.61831 26.88249 26.88249
6.544444
6.544444       24.71499       24.71499 23.29017 23.29017 26.13981 26.13981 22.53591 22.53591 26.89407 26.89407
6.555556
6.555556       24.66560       24.66560 23.21070 23.21070 26.12050 26.12050 22.44053 22.44053 26.89067 26.89067
6.566667
6.566667       24.79915       24.79915 23.31479 23.31479 26.28351 26.28351 22.52902 22.52902 27.06929 27.06929
6.577778
6.577778       24.63697       24.63697 23.12372 23.12372 26.15023 26.15023 22.32265 22.32265 26.95129 26.95129
6.588889
6.588889       24.73377       24.73377 23.19217 23.19217 26.27537 26.27537 22.37609 22.37609 27.09145 27.09145
6.600000
6.600000       24.61949       24.61949 23.05004 23.05004 26.18893 26.18893 22.21923 22.21923 27.01974 27.01974
6.611111
6.611111       24.56662       24.56662 22.96983 22.96983 26.16342 26.16342 22.12454 22.12454 27.00871 27.00871
6.622222
6.622222       24.54017       24.54017 22.91648 22.91648 26.16385 26.16385 22.05695 22.05695 27.02338 27.02338
6.633333
6.633333       24.65989       24.65989 23.00975 23.00975 26.31003 26.31003 22.13621 22.13621 27.18356 27.18356
6.644444
6.644444       24.54953       24.54953 22.87335 22.87335 26.22571 26.22571 21.98604 21.98604 27.11302 27.11302
6.655556
6.655556       24.49735       24.49735 22.79554 22.79554 26.19917 26.19917 21.89465 21.89465 27.10005 27.10005
6.666667
6.666667       24.47101       24.47101 22.74394 22.74394 26.19809 26.19809 21.82968 21.82968 27.11234 27.11234
6.677778
6.677778       24.45168       24.45168 22.69972 22.69972 26.20365 26.20365 21.77228 21.77228 27.13108 27.13108
6.688889
6.688889       24.60359       24.60359 22.82708 22.82708 26.38010 26.38010 21.88665 21.88665 27.32053 27.32053
6.700000
6.700000       24.93589       24.93589 23.13517 23.13517 26.73661 26.73661 22.18193 22.18193 27.68986 27.68986
6.711111
6.711111       25.22666       25.22666 23.40204 23.40204 27.05127 27.05127 22.43615 22.43615 28.01716 28.01716
6.722222
6.722222       25.35039       25.35039 23.50220 23.50220 27.19858 27.19858 22.52382 22.52382 28.17695 28.17695
6.733333
6.733333       25.38826       25.38826 23.51679 23.51679 27.25974 27.25974 22.52609 22.52609 28.25043 28.25043
6.744444
6.744444       25.39505       25.39505 23.50058 23.50058 27.28952 27.28952 22.49770 22.49770 28.29239 28.29239
6.755556
6.755556       25.39235       25.39235 23.47516 23.47516 27.30954 27.30954 22.46026 22.46026 28.32444 28.32444
6.766667
6.766667       25.38705       25.38705 23.44740 23.44740 27.32670 27.32670 22.42061 22.42061 28.35348 28.35348
6.777778
6.777778       25.38109       25.38109 23.41924 23.41924 27.34293 27.34293 22.38070 22.38070 28.38147 28.38147
6.788889
6.788889       25.37496       25.37496 23.39117 23.39117 27.35876 27.35876 22.34101 22.34101 28.40892 28.40892
6.800000
6.800000       25.37148       25.37148 23.36598 23.36598 27.37698 27.37698 22.30433 22.30433 28.43863 28.43863
6.811111
6.811111       25.85406       25.85406 23.82708 23.82708 27.88104 27.88104 22.75406 22.75406 28.95406 28.95406
6.822222
6.822222       26.31824       26.31824 24.27001 24.27001 28.36648 28.36648 23.18574 23.18574 29.45074 29.45074
6.833333
6.833333       26.36433       26.36433 24.29506 24.29506 28.43359 28.43359 23.19966 23.19966 29.52900 29.52900
6.844444
6.844444       26.54610       26.54610 24.45601 24.45601 28.63619 28.63619 23.34958 23.34958 29.74261 29.74261

function (x, alpha = NULL, beta = NULL, gamma = NULL, seasonal = c("additive", 
function (x, alpha = NULL, beta = NULL, gamma = NULL, seasonal = c("additive", 
    "multiplicative"), start.periods = 2, l.start = NULL, b.start = NULL, 
    "multiplicative"), start.periods = 2, l.start = NULL, b.start = NULL, 
    s.start = NULL, optim.start = c(alpha = 0.3, beta = 0.1, 
    s.start = NULL, optim.start = c(alpha = 0.3, beta = 0.1, 
        gamma = 0.1), optim.control = list()) 
        gamma = 0.1), optim.control = list()) 
{
{
    x <- as.ts(x)
    x <- as.ts(x)
    seasonal <- match.arg(seasonal)
    seasonal <- match.arg(seasonal)
    f <- frequency(x)
    f <- frequency(x)
    if (!is.null(alpha) && (alpha == 0)) 
    if (!is.null(alpha) && (alpha == 0)) 
        stop("cannot fit models without level ('alpha' must not be 0 or FALSE)")
        stop("cannot fit models without level ('alpha' must not be 0 or FALSE)")
    if (!all(is.null(c(alpha, beta, gamma))) && any(c(alpha, 
    if (!all(is.null(c(alpha, beta, gamma))) && any(c(alpha, 
        beta, gamma) < 0 || c(alpha, beta, gamma) > 1)) 
        beta, gamma) < 0 || c(alpha, beta, gamma) > 1)) 
        stop("'alpha', 'beta' and 'gamma' must be within the unit interval")
        stop("'alpha', 'beta' and 'gamma' must be within the unit interval")
    if ((is.null(gamma) || gamma > 0)) {
    if ((is.null(gamma) || gamma > 0)) {
        if (seasonal == "multiplicative" && any(x == 0)) 
        if (seasonal == "multiplicative" && any(x == 0)) 
            stop("data must be non-zero for multiplicative Holt-Winters")
            stop("data must be non-zero for multiplicative Holt-Winters")
        if (start.periods < 2) 
        if (start.periods < 2) 
            stop("need at least 2 periods to compute seasonal start values")
            stop("need at least 2 periods to compute seasonal start values")
    }
    }
    if (!is.null(gamma) && is.logical(gamma) && !gamma) {
    if (!is.null(gamma) && is.logical(gamma) && !gamma) {
        expsmooth <- !is.null(beta) && is.logical(beta) && !beta
        expsmooth <- !is.null(beta) && is.logical(beta) && !beta
        if (is.null(l.start)) 
        if (is.null(l.start)) 
            l.start <- if (expsmooth) 
            l.start <- if (expsmooth) 
                x[1L]
                x[1L]
            else x[2L]
            else x[2L]
        if (is.null(b.start)) 
        if (is.null(b.start)) 
            if (is.null(beta) || !is.logical(beta) || beta) 
            if (is.null(beta) || !is.logical(beta) || beta) 
                b.start <- x[2L] - x[1L]
                b.start <- x[2L] - x[1L]
        start.time <- 3 - expsmooth
        start.time <- 3 - expsmooth
        s.start <- 0
        s.start <- 0
    }
    }
    else {
    else {
        start.time <- f + 1
        start.time <- f + 1
        wind <- start.periods * f
        wind <- start.periods * f
        st <- decompose(ts(x[1L:wind], start = start(x), frequency = f), 
        st <- decompose(ts(x[1L:wind], start = start(x), frequency = f), 
            seasonal)
            seasonal)
        dat <- na.omit(st$trend)
        dat <- na.omit(st$trend)
        m <- lm(dat ~ seq_along(dat))
        m <- lm(dat ~ seq_along(dat))
        if (is.null(l.start)) 
        if (is.null(l.start)) 
            l.start <- as.vector(coef(m)[1L])
            l.start <- as.vector(coef(m)[1L])
        if (is.null(b.start)) 
        if (is.null(b.start)) 
            b.start <- as.vector(coef(m)[2L])
            b.start <- as.vector(coef(m)[2L])
        if (is.null(s.start)) 
        if (is.null(s.start)) 
            s.start <- st$figure
            s.start <- st$figure
    }
    }
    lenx <- as.integer(length(x))
    lenx <- as.integer(length(x))
    if (is.na(lenx)) 
    if (is.na(lenx)) 
        stop("invalid length(x)")
        stop("invalid length(x)")
    len <- lenx - start.time + 1
    len <- lenx - start.time + 1
    hw <- function(alpha, beta, gamma) .C(C_HoltWinters, as.double(x), 
    hw <- function(alpha, beta, gamma) .C(C_HoltWinters, as.double(x), 
        lenx, as.double(max(min(alpha, 1), 0)), as.double(max(min(beta, 
        lenx, as.double(max(min(alpha, 1), 0)), as.double(max(min(beta, 
            1), 0)), as.double(max(min(gamma, 1), 0)), as.integer(start.time), 
            1), 0)), as.double(max(min(gamma, 1), 0)), as.integer(start.time), 
        as.integer(!+(seasonal == "multiplicative")), as.integer(f), 
        as.integer(!+(seasonal == "multiplicative")), as.integer(f), 
        as.integer(!is.logical(beta) || beta), as.integer(!is.logical(gamma) || 
        as.integer(!is.logical(beta) || beta), as.integer(!is.logical(gamma) || 
            gamma), a = as.double(l.start), b = as.double(b.start), 
            gamma), a = as.double(l.start), b = as.double(b.start), 
        s = as.double(s.start), SSE = as.double(0), level = double(len + 
        s = as.double(s.start), SSE = as.double(0), level = double(len + 
            1L), trend = double(len + 1L), seasonal = double(len + 
            1L), trend = double(len + 1L), seasonal = double(len + 
            f))
            f))
    if (is.null(gamma)) {
    if (is.null(gamma)) {
        if (is.null(alpha)) {
        if (is.null(alpha)) {
            if (is.null(beta)) {
            if (is.null(beta)) {
                error <- function(p) hw(p[1L], p[2L], p[3L])$SSE
                error <- function(p) hw(p[1L], p[2L], p[3L])$SSE
                sol <- optim(optim.start, error, method = "L-BFGS-B", 
                sol <- optim(optim.start, error, method = "L-BFGS-B", 
                  lower = c(0, 0, 0), upper = c(1, 1, 1), control = optim.control)
                  lower = c(0, 0, 0), upper = c(1, 1, 1), control = optim.control)
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                  1)) {
                  1)) {
                  if (sol$convergence > 50) {
                  if (sol$convergence > 50) {
                    warning(gettextf("optimization difficulties: %s", 
                    warning(gettextf("optimization difficulties: %s", 
                      sol$message), domain = NA)
                      sol$message), domain = NA)
                  }
                  }
                  else stop("optimization failure")
                  else stop("optimization failure")
                }
                }
                alpha <- sol$par[1L]
                alpha <- sol$par[1L]
                beta <- sol$par[2L]
                beta <- sol$par[2L]
                gamma <- sol$par[3L]
                gamma <- sol$par[3L]
            }
            }
            else {
            else {
                error <- function(p) hw(p[1L], beta, p[2L])$SSE
                error <- function(p) hw(p[1L], beta, p[2L])$SSE
                sol <- optim(c(optim.start["alpha"], optim.start["gamma"]), 
                sol <- optim(c(optim.start["alpha"], optim.start["gamma"]), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  upper = c(1, 1), control = optim.control)
                  upper = c(1, 1), control = optim.control)
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                  1)) {
                  1)) {
                  if (sol$convergence > 50) {
                  if (sol$convergence > 50) {
                    warning(gettextf("optimization difficulties: %s", 
                    warning(gettextf("optimization difficulties: %s", 
                      sol$message), domain = NA)
                      sol$message), domain = NA)
                  }
                  }
                  else stop("optimization failure")
                  else stop("optimization failure")
                }
                }
                alpha <- sol$par[1L]
                alpha <- sol$par[1L]
                gamma <- sol$par[2L]
                gamma <- sol$par[2L]
            }
            }
        }
        }
        else {
        else {
            if (is.null(beta)) {
            if (is.null(beta)) {
                error <- function(p) hw(alpha, p[1L], p[2L])$SSE
                error <- function(p) hw(alpha, p[1L], p[2L])$SSE
                sol <- optim(c(optim.start["beta"], optim.start["gamma"]), 
                sol <- optim(c(optim.start["beta"], optim.start["gamma"]), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  upper = c(1, 1), control = optim.control)
                  upper = c(1, 1), control = optim.control)
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                  1)) {
                  1)) {
                  if (sol$convergence > 50) {
                  if (sol$convergence > 50) {
                    warning(gettextf("optimization difficulties: %s", 
                    warning(gettextf("optimization difficulties: %s", 
                      sol$message), domain = NA)
                      sol$message), domain = NA)
                  }
                  }
                  else stop("optimization failure")
                  else stop("optimization failure")
                }
                }
                beta <- sol$par[1L]
                beta <- sol$par[1L]
                gamma <- sol$par[2L]
                gamma <- sol$par[2L]
            }
            }
            else {
            else {
                error <- function(p) hw(alpha, beta, p)$SSE
                error <- function(p) hw(alpha, beta, p)$SSE
                gamma <- optimize(error, lower = 0, upper = 1)$minimum
                gamma <- optimize(error, lower = 0, upper = 1)$minimum
            }
            }
        }
        }
    }
    }
    else {
    else {
        if (is.null(alpha)) {
        if (is.null(alpha)) {
            if (is.null(beta)) {
            if (is.null(beta)) {
                error <- function(p) hw(p[1L], p[2L], gamma)$SSE
                error <- function(p) hw(p[1L], p[2L], gamma)$SSE
                sol <- optim(c(optim.start["alpha"], optim.start["beta"]), 
                sol <- optim(c(optim.start["alpha"], optim.start["beta"]), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  upper = c(1, 1), control = optim.control)
                  upper = c(1, 1), control = optim.control)
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                  1)) {
                  1)) {
                  if (sol$convergence > 50) {
                  if (sol$convergence > 50) {
                    warning(gettextf("optimization difficulties: %s", 
                    warning(gettextf("optimization difficulties: %s", 
                      sol$message), domain = NA)
                      sol$message), domain = NA)
                  }
                  }
                  else stop("optimization failure")
                  else stop("optimization failure")
                }
                }
                alpha <- sol$par[1L]
                alpha <- sol$par[1L]
                beta <- sol$par[2L]
                beta <- sol$par[2L]
            }
            }
            else {
            else {
                error <- function(p) hw(p, beta, gamma)$SSE
                error <- function(p) hw(p, beta, gamma)$SSE
                alpha <- optimize(error, lower = 0, upper = 1)$minimum
                alpha <- optimize(error, lower = 0, upper = 1)$minimum
            }
            }
        }
        }
        else {
        else {
            if (is.null(beta)) {
            if (is.null(beta)) {
                error <- function(p) hw(alpha, p, gamma)$SSE
                error <- function(p) hw(alpha, p, gamma)$SSE
                beta <- optimize(error, lower = 0, upper = 1)$minimum
                beta <- optimize(error, lower = 0, upper = 1)$minimum
            }
            }
        }
        }
    }
    }
    final.fit <- hw(alpha, beta, gamma)
    final.fit <- hw(alpha, beta, gamma)
    fitted <- ts(cbind(xhat = final.fit$level[-len - 1], level = final.fit$level[-len - 
    fitted <- ts(cbind(xhat = final.fit$level[-len - 1], level = final.fit$level[-len - 
        1], trend = if (!is.logical(beta) || beta) 
        1], trend = if (!is.logical(beta) || beta) 
        final.fit$trend[-len - 1], season = if (!is.logical(gamma) || 
        final.fit$trend[-len - 1], season = if (!is.logical(gamma) || 
        gamma) 
        gamma) 
        final.fit$seasonal[1L:len]), start = start(lag(x, k = 1 - 
        final.fit$seasonal[1L:len]), start = start(lag(x, k = 1 - 
        start.time)), frequency = frequency(x))
        start.time)), frequency = frequency(x))
    if (!is.logical(beta) || beta) 
    if (!is.logical(beta) || beta) 
        fitted[, 1] <- fitted[, 1] + fitted[, "trend"]
        fitted[, 1] <- fitted[, 1] + fitted[, "trend"]
    if (!is.logical(gamma) || gamma) 
    if (!is.logical(gamma) || gamma) 
        fitted[, 1] <- if (seasonal == "multiplicative") 
        fitted[, 1] <- if (seasonal == "multiplicative") 
            fitted[, 1] * fitted[, "season"]
            fitted[, 1] * fitted[, "season"]
        else fitted[, 1] + fitted[, "season"]
        else fitted[, 1] + fitted[, "season"]
    structure(list(fitted = fitted, x = x, alpha = alpha, beta = beta, 
    structure(list(fitted = fitted, x = x, alpha = alpha, beta = beta, 
        gamma = gamma, coefficients = c(a = final.fit$level[len + 
        gamma = gamma, coefficients = c(a = final.fit$level[len + 
            1], b = if (!is.logical(beta) || beta) final.fit$trend[len + 
            1], b = if (!is.logical(beta) || beta) final.fit$trend[len + 
            1], s = if (!is.logical(gamma) || gamma) final.fit$seasonal[len + 
            1], s = if (!is.logical(gamma) || gamma) final.fit$seasonal[len + 
            1L:f]), seasonal = seasonal, SSE = final.fit$SSE, 
            1L:f]), seasonal = seasonal, SSE = final.fit$SSE, 
        call = match.call()), class = "HoltWinters")
        call = match.call()), class = "HoltWinters")
}
}
<environment: namespace:stats>
<environment: namespace:stats>
