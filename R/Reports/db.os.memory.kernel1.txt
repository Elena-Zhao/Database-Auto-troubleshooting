
Forecast method: HoltWinters

Model Information:
Holt-Winters exponential smoothing with trend and additive seasonal component.

Call:
HoltWinters(x = metricsts)

Smoothing parameters:
 alpha: 0.4711449
 beta : 0
 gamma: 0.5438933

Coefficients:
           [,1]
a   15254.13085
b     -16.66229
s1    261.01499
s2    326.01909
s3     56.23432
s4    806.83106
s5   1301.83319
s6   1069.16734
s7    657.44564
s8   1147.64606
s9    917.57953
s10   367.20663
s11   743.27261
s12  1297.80229
s13  1357.30539
s14  1086.16659
s15   888.01869
s16   274.85914
s17   827.24898
s18   904.10463
s19  1048.69501
s20  1380.47171
s21  1708.73226
s22  1398.39099
s23  2337.50196
s24  3138.59245
s25  3354.87349
s26  3835.29912
s27  4159.91869
s28  4377.52104
s29  4479.27870
s30  5202.63772
s31  4345.00437
s32  3333.42196
s33  3902.86545
s34  3823.89522
s35  3492.89499
s36  3701.61779
s37  3749.31940
s38  3780.88423
s39  3538.78749
s40  3782.99391
s41  3196.17329
s42  2604.64173
s43  2549.22818
s44  1026.38751
s45   198.28901
s46  -180.34842
s47  -196.29002
s48 -1617.31044
s49 -2058.25944
s50 -2759.45597
s51 -2021.93705
s52 -2384.80224
s53 -2299.72654
s54 -2464.04488
s55 -1418.53032
s56  -666.85322
s57  -694.07269
s58  -993.80795
s59 -1066.68244
s60 -1580.26228
s61 -2214.37867
s62 -2668.77294
s63 -3001.80144
s64 -2179.11483
s65 -1999.52626
s66 -3047.45915
s67 -3135.86009
s68 -2702.95032
s69 -2142.73298
s70 -3844.95158
s71 -3860.86071
s72 -3485.63733
s73 -2597.47828
s74 -3736.18141
s75 -3622.37963
s76 -2733.21205
s77 -2465.26233
s78 -2516.31504
s79 -2369.30261
s80 -2512.61816
s81 -2193.61662
s82 -1554.08288
s83 -2326.80037
s84 -2287.09308
s85 -1671.60467
s86 -1889.77027
s87 -1800.83416
s88 -1607.05831
s89  -644.00338
s90   150.80183

Error measures:
                 ME     RMSE      MAE        MPE     MAPE      MASE
Training set 25.133 1463.277 1052.408 0.09536784 7.153583 0.4228986

Forecasts:
         Point Forecast     Lo 80    Hi 80     Lo 95    Hi 95
6.111111       15498.48 13620.957 17376.01 12627.054 18369.91
6.122222       15546.83 13471.349 17622.30 12372.659 18720.99
6.133333       15260.38 13004.254 17516.50 11809.935 18710.82
6.144444       15994.31 13570.970 18417.66 12288.130 19700.50
6.155556       16472.65 13892.908 19052.40 12527.273 20418.03
6.166667       16223.32 13496.132 18950.52 12052.444 20394.21
6.177778       15794.94 12927.874 18662.01 11410.140 20179.74
6.188889       16268.48 13268.051 19268.91 11679.720 20857.24
6.200000       16021.75 12893.642 19149.86 11237.721 20805.78
6.211111       15454.71 12203.937 18705.49 10483.079 20426.35
6.222222       15814.12 12445.135 19183.10 10661.703 20966.53
6.233333       16351.99 12868.806 19835.17 11024.921 21679.05
6.244444       16394.83 12801.077 19988.58 10898.660 21890.99
6.255556       16107.03 12406.008 19808.04 10446.807 21767.24
6.266667       15892.22 12086.952 19697.48 10072.568 21711.86
6.277778       15262.39 11355.666 19169.12  9287.569 21237.22
6.288889       15798.12 11792.498 19803.74  9672.049 21924.19
6.300000       15858.31 11756.180 19960.45  9584.641 22131.99
6.311111       15986.24 11789.815 20182.67  9568.360 22404.12
6.322222       16301.36 12012.709 20590.00  9742.436 22860.28
6.333333       16612.96 12234.029 20991.88  9915.966 23309.94
6.344444       16285.95 11818.571 20753.33  9453.683 23118.22
6.355556       17208.40 12654.283 21762.52 10243.479 24173.32
6.366667       17992.83 13353.596 22632.06 10897.735 25087.92
6.377778       18192.45 13469.633 22915.26 10969.527 25415.37
6.388889       18656.21 13851.269 23461.15 11307.686 26004.73
6.400000       18964.17 14078.479 23849.86 11492.151 26436.18
6.411111       19165.11 14199.984 24130.23 11571.607 26758.61
6.422222       19250.20 14206.896 24293.51 11537.131 26963.28
6.433333       19956.90 14836.603 25077.20 12126.082 27787.72
6.444444       19082.60 13886.458 24278.75 11135.784 27029.42
6.455556       18054.36 12783.456 23325.26  9993.208 26115.51
6.466667       18607.14 13262.524 23951.76 10433.256 26781.03
6.477778       18511.51 13094.183 23928.83 10226.424 26796.59
6.488889       18163.85 12674.774 23652.92  9769.034 26558.66
6.500000       18355.91 12796.014 23915.80  9852.784 26859.03
6.511111       18386.95 12757.123 24016.77  9776.875 26997.02
6.522222       18401.85 12702.954 24100.74  9686.142 27117.55
6.533333       18143.09 12375.950 23910.23  9323.012 26963.17
6.544444       18370.63 12536.048 24205.22  9447.405 27293.86
6.555556       17767.15 11865.890 23668.41  8741.951 26792.35
6.566667       17158.96 11191.765 23126.15  8032.925 26284.99
6.577778       17086.88 11054.479 23119.28  7861.119 26312.64
6.588889       15547.38  9450.464 21644.29  6222.952 24871.80
6.600000       14702.62  8541.866 20863.37  5280.561 24124.67
6.611111       14307.32  8083.384 20531.25  4788.632 23826.00
6.622222       14274.71  7988.232 20561.19  4660.370 23889.06
6.633333       12837.03  6488.618 19185.44  3127.972 22546.09
6.644444       12379.42  5969.674 18789.16  2576.560 22182.28
6.655556       11661.56  5191.064 18132.06  1765.790 21557.33

Forecast method: HoltWinters

Model Information:
Holt-Winters exponential smoothing with trend and additive seasonal component.

Call:
HoltWinters(x = metricsts)

Smoothing parameters:
 alpha: 0.4711449
 beta : 0
 gamma: 0.5438933

Coefficients:
           [,1]
a   15254.13085
b     -16.66229
s1    261.01499
s2    326.01909
s3     56.23432
s4    806.83106
s5   1301.83319
s6   1069.16734
s7    657.44564
s8   1147.64606
s9    917.57953
s10   367.20663
s11   743.27261
s12  1297.80229
s13  1357.30539
s14  1086.16659
s15   888.01869
s16   274.85914
s17   827.24898
s18   904.10463
s19  1048.69501
s20  1380.47171
s21  1708.73226
s22  1398.39099
s23  2337.50196
s24  3138.59245
s25  3354.87349
s26  3835.29912
s27  4159.91869
s28  4377.52104
s29  4479.27870
s30  5202.63772
s31  4345.00437
s32  3333.42196
s33  3902.86545
s34  3823.89522
s35  3492.89499
s36  3701.61779
s37  3749.31940
s38  3780.88423
s39  3538.78749
s40  3782.99391
s41  3196.17329
s42  2604.64173
s43  2549.22818
s44  1026.38751
s45   198.28901
s46  -180.34842
s47  -196.29002
s48 -1617.31044
s49 -2058.25944
s50 -2759.45597
s51 -2021.93705
s52 -2384.80224
s53 -2299.72654
s54 -2464.04488
s55 -1418.53032
s56  -666.85322
s57  -694.07269
s58  -993.80795
s59 -1066.68244
s60 -1580.26228
s61 -2214.37867
s62 -2668.77294
s63 -3001.80144
s64 -2179.11483
s65 -1999.52626
s66 -3047.45915
s67 -3135.86009
s68 -2702.95032
s69 -2142.73298
s70 -3844.95158
s71 -3860.86071
s72 -3485.63733
s73 -2597.47828
s74 -3736.18141
s75 -3622.37963
s76 -2733.21205
s77 -2465.26233
s78 -2516.31504
s79 -2369.30261
s80 -2512.61816
s81 -2193.61662
s82 -1554.08288
s83 -2326.80037
s84 -2287.09308
s85 -1671.60467
s86 -1889.77027
s87 -1800.83416
s88 -1607.05831
s89  -644.00338
s90   150.80183

Error measures:
                 ME     RMSE      MAE        MPE     MAPE      MASE
Training set 25.133 1463.277 1052.408 0.09536784 7.153583 0.4228986

Forecasts:
         Point Forecast     Lo 80    Hi 80     Lo 95    Hi 95
6.111111       15498.48 13620.957 17376.01 12627.054 18369.91
6.122222       15546.83 13471.349 17622.30 12372.659 18720.99
6.133333       15260.38 13004.254 17516.50 11809.935 18710.82
6.144444       15994.31 13570.970 18417.66 12288.130 19700.50
6.155556       16472.65 13892.908 19052.40 12527.273 20418.03
6.166667       16223.32 13496.132 18950.52 12052.444 20394.21
6.177778       15794.94 12927.874 18662.01 11410.140 20179.74
6.188889       16268.48 13268.051 19268.91 11679.720 20857.24
6.200000       16021.75 12893.642 19149.86 11237.721 20805.78
6.211111       15454.71 12203.937 18705.49 10483.079 20426.35
6.222222       15814.12 12445.135 19183.10 10661.703 20966.53
6.233333       16351.99 12868.806 19835.17 11024.921 21679.05
6.244444       16394.83 12801.077 19988.58 10898.660 21890.99
6.255556       16107.03 12406.008 19808.04 10446.807 21767.24
6.266667       15892.22 12086.952 19697.48 10072.568 21711.86
6.277778       15262.39 11355.666 19169.12  9287.569 21237.22
6.288889       15798.12 11792.498 19803.74  9672.049 21924.19
6.300000       15858.31 11756.180 19960.45  9584.641 22131.99
6.311111       15986.24 11789.815 20182.67  9568.360 22404.12
6.322222       16301.36 12012.709 20590.00  9742.436 22860.28
6.333333       16612.96 12234.029 20991.88  9915.966 23309.94
6.344444       16285.95 11818.571 20753.33  9453.683 23118.22
6.355556       17208.40 12654.283 21762.52 10243.479 24173.32
6.366667       17992.83 13353.596 22632.06 10897.735 25087.92
6.377778       18192.45 13469.633 22915.26 10969.527 25415.37
6.388889       18656.21 13851.269 23461.15 11307.686 26004.73
6.400000       18964.17 14078.479 23849.86 11492.151 26436.18
6.411111       19165.11 14199.984 24130.23 11571.607 26758.61
6.422222       19250.20 14206.896 24293.51 11537.131 26963.28
6.433333       19956.90 14836.603 25077.20 12126.082 27787.72
6.444444       19082.60 13886.458 24278.75 11135.784 27029.42
6.455556       18054.36 12783.456 23325.26  9993.208 26115.51
6.466667       18607.14 13262.524 23951.76 10433.256 26781.03
6.477778       18511.51 13094.183 23928.83 10226.424 26796.59
6.488889       18163.85 12674.774 23652.92  9769.034 26558.66
6.500000       18355.91 12796.014 23915.80  9852.784 26859.03
6.511111       18386.95 12757.123 24016.77  9776.875 26997.02
6.522222       18401.85 12702.954 24100.74  9686.142 27117.55
6.533333       18143.09 12375.950 23910.23  9323.012 26963.17
6.544444       18370.63 12536.048 24205.22  9447.405 27293.86
6.555556       17767.15 11865.890 23668.41  8741.951 26792.35
6.566667       17158.96 11191.765 23126.15  8032.925 26284.99
6.577778       17086.88 11054.479 23119.28  7861.119 26312.64
6.588889       15547.38  9450.464 21644.29  6222.952 24871.80
6.600000       14702.62  8541.866 20863.37  5280.561 24124.67
6.611111       14307.32  8083.384 20531.25  4788.632 23826.00
6.622222       14274.71  7988.232 20561.19  4660.370 23889.06
6.633333       12837.03  6488.618 19185.44  3127.972 22546.09
6.644444       12379.42  5969.674 18789.16  2576.560 22182.28
6.655556       11661.56  5191.064 18132.06  1765.790 21557.33
function (x, alpha = NULL, beta = NULL, gamma = NULL, seasonal = c("additive", 
    "multiplicative"), start.periods = 2, l.start = NULL, b.start = NULL, 
    s.start = NULL, optim.start = c(alpha = 0.3, beta = 0.1, 
        gamma = 0.1), optim.control = list()) 
{
    x <- as.ts(x)
    seasonal <- match.arg(seasonal)
    f <- frequency(x)
    if (!is.null(alpha) && (alpha == 0)) 
        stop("cannot fit models without level ('alpha' must not be 0 or FALSE)")
    if (!all(is.null(c(alpha, beta, gamma))) && any(c(alpha, 
        beta, gamma) < 0 || c(alpha, beta, gamma) > 1)) 
        stop("'alpha', 'beta' and 'gamma' must be within the unit interval")
    if ((is.null(gamma) || gamma > 0)) {
        if (seasonal == "multiplicative" && any(x == 0)) 
            stop("data must be non-zero for multiplicative Holt-Winters")
        if (start.periods < 2) 
            stop("need at least 2 periods to compute seasonal start values")
    }
    if (!is.null(gamma) && is.logical(gamma) && !gamma) {
        expsmooth <- !is.null(beta) && is.logical(beta) && !beta
        if (is.null(l.start)) 
            l.start <- if (expsmooth) 
                x[1L]
            else x[2L]
        if (is.null(b.start)) 
            if (is.null(beta) || !is.logical(beta) || beta) 
                b.start <- x[2L] - x[1L]
        start.time <- 3 - expsmooth
        s.start <- 0
    }
    else {
        start.time <- f + 1
        wind <- start.periods * f
        st <- decompose(ts(x[1L:wind], start = start(x), frequency = f), 
            seasonal)
        dat <- na.omit(st$trend)
        m <- lm(dat ~ seq_along(dat))
        if (is.null(l.start)) 
            l.start <- as.vector(coef(m)[1L])
        if (is.null(b.start)) 
            b.start <- as.vector(coef(m)[2L])
        if (is.null(s.start)) 
            s.start <- st$figure
    }
    lenx <- as.integer(length(x))
    if (is.na(lenx)) 
        stop("invalid length(x)")
    len <- lenx - start.time + 1
    hw <- function(alpha, beta, gamma) .C(C_HoltWinters, as.double(x), 
        lenx, as.double(max(min(alpha, 1), 0)), as.double(max(min(beta, 
            1), 0)), as.double(max(min(gamma, 1), 0)), as.integer(start.time), 
        as.integer(!+(seasonal == "multiplicative")), as.integer(f), 
        as.integer(!is.logical(beta) || beta), as.integer(!is.logical(gamma) || 
            gamma), a = as.double(l.start), b = as.double(b.start), 
        s = as.double(s.start), SSE = as.double(0), level = double(len + 
            1L), trend = double(len + 1L), seasonal = double(len + 
            f))
    if (is.null(gamma)) {
        if (is.null(alpha)) {
            if (is.null(beta)) {
                error <- function(p) hw(p[1L], p[2L], p[3L])$SSE
                sol <- optim(optim.start, error, method = "L-BFGS-B", 
                  lower = c(0, 0, 0), upper = c(1, 1, 1), control = optim.control)
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                  1)) {
                  if (sol$convergence > 50) {
                    warning(gettextf("optimization difficulties: %s", 
                      sol$message), domain = NA)
                  }
                  else stop("optimization failure")
                }
                alpha <- sol$par[1L]
                beta <- sol$par[2L]
                gamma <- sol$par[3L]
            }
            else {
                error <- function(p) hw(p[1L], beta, p[2L])$SSE
                sol <- optim(c(optim.start["alpha"], optim.start["gamma"]), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  upper = c(1, 1), control = optim.control)
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                  1)) {
                  if (sol$convergence > 50) {
                    warning(gettextf("optimization difficulties: %s", 
                      sol$message), domain = NA)
                  }
                  else stop("optimization failure")
                }
                alpha <- sol$par[1L]
                gamma <- sol$par[2L]
            }
        }
        else {
            if (is.null(beta)) {
                error <- function(p) hw(alpha, p[1L], p[2L])$SSE
                sol <- optim(c(optim.start["beta"], optim.start["gamma"]), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  upper = c(1, 1), control = optim.control)
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                  1)) {
                  if (sol$convergence > 50) {
                    warning(gettextf("optimization difficulties: %s", 
                      sol$message), domain = NA)
                  }
                  else stop("optimization failure")
                }
                beta <- sol$par[1L]
                gamma <- sol$par[2L]
            }
            else {
                error <- function(p) hw(alpha, beta, p)$SSE
                gamma <- optimize(error, lower = 0, upper = 1)$minimum
            }
        }
    }
    else {
        if (is.null(alpha)) {
            if (is.null(beta)) {
                error <- function(p) hw(p[1L], p[2L], gamma)$SSE
                sol <- optim(c(optim.start["alpha"], optim.start["beta"]), 
                  error, method = "L-BFGS-B", lower = c(0, 0), 
                  upper = c(1, 1), control = optim.control)
                if (sol$convergence || any(sol$par < 0 | sol$par > 
                  1)) {
                  if (sol$convergence > 50) {
                    warning(gettextf("optimization difficulties: %s", 
                      sol$message), domain = NA)
                  }
                  else stop("optimization failure")
                }
                alpha <- sol$par[1L]
                beta <- sol$par[2L]
            }
            else {
                error <- function(p) hw(p, beta, gamma)$SSE
                alpha <- optimize(error, lower = 0, upper = 1)$minimum
            }
        }
        else {
            if (is.null(beta)) {
                error <- function(p) hw(alpha, p, gamma)$SSE
                beta <- optimize(error, lower = 0, upper = 1)$minimum
            }
        }
    }
    final.fit <- hw(alpha, beta, gamma)
    fitted <- ts(cbind(xhat = final.fit$level[-len - 1], level = final.fit$level[-len - 
        1], trend = if (!is.logical(beta) || beta) 
        final.fit$trend[-len - 1], season = if (!is.logical(gamma) || 
        gamma) 
        final.fit$seasonal[1L:len]), start = start(lag(x, k = 1 - 
        start.time)), frequency = frequency(x))
    if (!is.logical(beta) || beta) 
        fitted[, 1] <- fitted[, 1] + fitted[, "trend"]
    if (!is.logical(gamma) || gamma) 
        fitted[, 1] <- if (seasonal == "multiplicative") 
            fitted[, 1] * fitted[, "season"]
        else fitted[, 1] + fitted[, "season"]
    structure(list(fitted = fitted, x = x, alpha = alpha, beta = beta, 
        gamma = gamma, coefficients = c(a = final.fit$level[len + 
            1], b = if (!is.logical(beta) || beta) final.fit$trend[len + 
            1], s = if (!is.logical(gamma) || gamma) final.fit$seasonal[len + 
            1L:f]), seasonal = seasonal, SSE = final.fit$SSE, 
        call = match.call()), class = "HoltWinters")
}
<environment: namespace:stats>
